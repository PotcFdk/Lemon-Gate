LemonGate.HelperFunctionData = LemonGate.HelperFunctionData or { } 
local Data = LemonGate.HelperFunctionData

/*---------------------------------------------------------------------------
	Total functions: 633
	Total events: 12
	
	Documented functions: 152
	Documented events: 0
	
	Undocumented functions: 481
	Undocumented events: 12
	
	Generated at: 03/14/13 22:05:36
---------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------
	Events
---------------------------------------------------------------------------*/

// F
Data["final<>"] = ""

// K
Data["keypress<n>"] = ""
Data["keyrelease<n>"] = ""

// L
Data["loadDupeBuffer<b>"] = ""

// P
Data["playerChat<es s>"] = ""
Data["playerJoin<e>"] = ""
Data["playerQuit<e>"] = ""

// R
Data["receiveBuffer<seb>"] = ""

// S
Data["saveDupeBuffer< b>"] = ""

// T
Data["think<>"] = ""
Data["tick<>"] = ""
Data["trigger<s>"] = ""

/*---------------------------------------------------------------------------
	Functions
---------------------------------------------------------------------------*/

// A
Data["a(c: n)"] = "Returns the alpha property of a color."
Data["aabbMax(e: v)"] = "Gets the maximum local position of the entity's axis aligned bounding box."
Data["aabbMin(e: v)"] = "Gets the minimum local position of the entity's axis aligned bounding box."
Data["abs(n n)"] = "Returns the magnitude of the argument."
Data["acos(n n)"] = "Returns the inverse cosine of the argument, in degrees."
Data["acosr(n n)"] = "Returns the inverse cosine of the argument, in radians."
Data["adj(m2 m2)"] = "Returns the adjugate of the matrix."
Data["adj(m3 m3)"] = "Returns the adjugate of the matrix."
Data["aimEntity(e: e)"] = "Returns the entity that the entity is aiming at."
Data["aimNormal(e: v)"] = "Returns a normalized directional vector perpendicular to the surface pointed at."
Data["aimPos(e: v)"] = "Returns a vector that represents the point the entity is looking at."
Data["ang(e: a)"] = "Gets the pitch, yaw and roll of the entity."
Data["ang(h: a)"] = "Gets the pitch, yaw and roll of the hologram."
Data["ang(nnn a)"] = "Makes a new angle."
Data["angVel(e: a)"] = "Returns the entities angular velocity."
Data["angnorm(a a)"] = "Gets the normalized angle of and angle"
Data["applyAngForce(e:a)"] = "Applies torque to the entity according to the given local angle."
Data["applyForce(e:v)"] = "Applies force to the entity according to the given vector's direction and magnitude."
Data["applyOffsetForce(e:vv)"] = "Applies force to the entity according to the first vector from the location of the second."
Data["armor(e: n)"] = "Returns the players current armor."
Data["asin(n n)"] = "Returns the inverse sine of the argument, in degrees."
Data["asinr(n n)"] = "Returns the inverse sine of the argument, in radians."
Data["atan(n n)"] = "Returns the inverse tangent of the argument, in degrees."
Data["atan(nn n)"] = "Returns the inverse tangent of the arguments (arg1 / arg2), in degrees. This function accounts for positive/negative arguments, and arguments at or close to 0. Commonly known as atan2."
Data["atanr(n n)"] = "Returns the inverse tangent of the argument, in radians."
Data["atanr(nn n)"] = "Returns the inverse tangent of the arguments (arg1 / arg2), in radians. This function accounts for positive/negative arguments, and arguments at or close to 0. Commonly known as atan2. "

// B
Data["b(c: n)"] = "Returns the blue property of a color."
Data["bearing(e:v n)"] = "Gets the bearing from the entity to the vector."
Data["bearing(vav n)"] = "Gets the bearing from the first position, at the specified angle, to the second position."
Data["boxCenter(e: v)"] = "Gets the center of the entities bounding box as a local vector."
Data["boxCenterWorld(e: v)"] = "Gets the center of the entities bounding box as a world vector."
Data["boxMax(e: v)"] = "Returns the max position of an entities bounding box."
Data["boxMin(e: v)"] = "Returns the min position of an entities bounding box."
Data["boxSize(e: v)"] = "Returns the size of the entities bounding box."
Data["buffer( b)"] = "Creates a new buffer."

// C
Data["cbrt(n n)"] = "Gets the cube root of the argument."
Data["ceil(a a)"] = "Rounds the argument up to the nearest integer."
Data["ceil(an a)"] = "Rounds Argument 1 up to Argument 2's decimal precision."
Data["ceil(n n)"] = "Rounds the argument up to the nearest integer."
Data["ceil(nn n)"] = "Rounds Argument 1 up to Argument 2's decimal precision."
Data["ceil(v v)"] = "Rounds the argument up to the nearest integer."
Data["ceil(vn v)"] = "Rounds Argument 1 up to Argument 2's decimal precision."
Data["clamp(aaa a)"] = "If Arg1 <= Arg2 (min) returns Arg2; If Arg1 >= Arg3 (max) returns Arg3; otherwise returns Arg1."
Data["clamp(nnn n)"] = "If Arg1 <= Arg2 (min) returns Arg2; If Arg1 >= Arg3 (max) returns Arg3; otherwise returns Arg1."
Data["clamp(vvv v)"] = "If Arg1 <= Arg2 (min) returns Arg2; If Arg1 >= Arg3 (max) returns Arg3; otherwise returns Arg1."
Data["class(e: s)"] = "Gets the class of and entity."
Data["close(xfl:)"] = "Closes the file."
Data["color(h:c)"] = "Gets the color of the hologram."
Data["color(nnn c)"] = "Creates a new RGB color with alpha set to 255."
Data["color(nnnn c)"] = "Creates a new RGBA color."
Data["column(m2:n v2)"] = "Returns the row as a 2D vector."
Data["column(m3:n v)"] = "Returns the row as a 3D vector."
Data["concmd(s n)"] = ""
Data["convar(s s)"] = "Give a console command such as \"name\" and it returns the set value "
Data["convarnum(s n)"] = "Give a console command such as \"sbox_godmode\" and it returns the set value "
Data["copy(t: t)"] = "Returns a independent copy of the table."
Data["cos(n n)"] = "Returns the cosine of the argument, in degrees."
Data["cosh(n n)"] = "Returns the hyperbolic cosine of the argument, in degrees."
Data["coshr(n n)"] = "Returns the hyperbolic cosine of the argument, in radians."
Data["cosr(n n)"] = "Returns the cosine of the argument, in radians."
Data["cot(n n)"] = "Returns the cotangent of the argument, in degrees."
Data["coth(n n)"] = "Returns the hyperbolic cotangent of the argument, in degrees."
Data["cothr(n n)"] = "Returns the hyperbolic cotangent of the argument, in radians."
Data["cotr(n n)"] = "Returns the cotangent of the argument, in radians."
Data["count(t: n)"] = "Returns the total amount of elements in the table."
Data["createDir(s)"] = "Creates the directory S"
Data["createDir(sf)"] = "Creates the directory S and calls F when done."
Data["cross(v2:v2 n)"] = "Gets the 2D vector cross product/wedge product."
Data["cross(v:v v)"] = "Gets the 3D vectors cross product."
Data["csc(n n)"] = "Calculates the cosecant of the argument, in degrees."
Data["csch(n n)"] = "Calculates the hyperbolic cosecant of the argument, in degrees."
Data["cschr(n n)"] = "Calculates the hyperbolic cosecant of the argument, in radians."
Data["cscr(n n)"] = "Calculates the cosecant of the argument, in radians."
Data["curTime( n)"] = "Returns the server current uptime."

// D
Data["debugTrace( t)"] = "Returns a table of traces on the stack."
Data["debugTrace(n t)"] = "Returns a trace at stack position N."
Data["det(m2 n)"] = "Returns the determinant of a matrix."
Data["det(m3 n)"] = "Returns the determinant of a matrix."
Data["diagonal(m2 v2)"] = "Returns a 2D vector comprising the elements along the leading diagonal "
Data["diagonal(m3 v)"] = "Returns a 3D vector comprising the elements along the leading diagonal "
Data["distance(v2:v2 n)"] = "Returns the distance between two vectors."
Data["distance(v:v n)"] = "Returns the distance between two vectors."
Data["distance2(v2:v2 n)"] = "Returns the squared distance between two vectors."
Data["distance2(v:v n)"] = "Returns the squared distance between two vectors."
Data["dot(v2:v2 n)"] = "Gets the vectors dot (scalar) product."
Data["dot(v:v n)"] = "Gets the vectors dot (scalar) product."
Data["driver(e: e)"] = "Returns the driver of the vehicle if there is one, nil otherwise."
Data["duration(sd: n)"] = "Gets the duration of the sound."
Data["duration(sd:n)"] = "Sets the duration of the sound."

// E
Data["egp3DTracker(wl:nv2)"] = ""
Data["egpAlign(wl:nn)"] = ""
Data["egpAlign(wl:nnn)"] = ""
Data["egpAlpha(wl:n n)"] = ""
Data["egpAlpha(wl:nn)"] = ""
Data["egpAngle(wl:n n)"] = ""
Data["egpAngle(wl:nn)"] = ""
Data["egpAngle(wl:nv2v2n)"] = ""
Data["egpBox(wl:nv2v2)"] = ""
Data["egpBoxOutline(wl:nv2v2)"] = ""
Data["egpCanSendUmsg( n)"] = ""
Data["egpCircle(wl:nv2v2)"] = ""
Data["egpCircleOutline(wl:nv2v2)"] = ""
Data["egpClear(wl:)"] = ""
Data["egpClearQueue( n)"] = ""
Data["egpColor(wl:n c)"] = ""
Data["egpColor(wl:nc)"] = ""
Data["egpCopy(wl:nn)"] = ""
Data["egpCursor(wl:e v2)"] = ""
Data["egpDrawTopLeft(wl:n)"] = ""
Data["egpFidelity(wl:n n)"] = ""
Data["egpFidelity(wl:nn)"] = ""
Data["egpFont(wl:ns)"] = ""
Data["egpFont(wl:nsn)"] = ""
Data["egpHasObject(wl:n n)"] = ""
Data["egpHudToggle(wl:)"] = ""
Data["egpLine(wl:nv2v2)"] = ""
Data["egpLoadFrame(wl:n)"] = ""
Data["egpLoadFrame(wl:s)"] = ""
Data["egpMaterial(wl:n s)"] = ""
Data["egpMaterial(wl:ns)"] = ""
Data["egpMaterialFromScreen(wl:ne)"] = ""
Data["egpMaxObjects( n)"] = ""
Data["egpMaxUmsgPerSecond( n)"] = ""
Data["egpNumObjects(wl: n)"] = ""
Data["egpOrder(wl:n n)"] = ""
Data["egpOrder(wl:nn)"] = ""
Data["egpParent(wl:n n)"] = ""
Data["egpParent(wl:ne)"] = ""
Data["egpParent(wl:nn)"] = ""
Data["egpParentToCursor(wl:n)"] = ""
Data["egpPos(wl:n v2)"] = ""
Data["egpPos(wl:nv2)"] = ""
Data["egpQueue( n)"] = ""
Data["egpQueueClk( n)"] = ""
Data["egpQueueClk(e n)"] = ""
Data["egpQueueClk(wl n)"] = ""
Data["egpQueueClkPly(e n)"] = ""
Data["egpQueuePlayer( e)"] = ""
Data["egpQueueScreen( e)"] = ""
Data["egpQueueScreenWirelink( wl)"] = ""
Data["egpRadius(wl:n n)"] = ""
Data["egpRadius(wl:nn)"] = ""
Data["egpRemove(wl:n)"] = ""
Data["egpResolution(wl:v2v2)"] = ""
Data["egpRoundedBox(wl:nv2v2)"] = ""
Data["egpRoundedBoxOutline(wl:nv2v2)"] = ""
Data["egpRunOnQueue(wl:n)"] = ""
Data["egpSaveFrame(wl:n)"] = ""
Data["egpSaveFrame(wl:s)"] = ""
Data["egpScale(wl:v2v2)"] = ""
Data["egpScrH(e n)"] = ""
Data["egpScrSize(e v2)"] = ""
Data["egpScrW(e n)"] = ""
Data["egpSetText(wl:ns)"] = ""
Data["egpSize(wl:n v2)"] = ""
Data["egpSize(wl:nn)"] = ""
Data["egpSize(wl:nv2)"] = ""
Data["egpSizeNum(wl:n n)"] = ""
Data["egpText(wl:nsv2)"] = ""
Data["egpTextLayout(wl:nsv2v2)"] = ""
Data["egpToWorld(wl:v2 v)"] = ""
Data["egpTrackerParent(wl:n e)"] = ""
Data["egpTriangle(wl:nv2v2v2)"] = ""
Data["egpTriangleOutline(wl:nv2v2v2)"] = ""
Data["egpUnParent(wl:n)"] = ""
Data["egpWedge(wl:nv2v2)"] = ""
Data["egpWedgeOutline(wl:nv2v2)"] = ""
Data["element(m2:nn n)"] = "Returns the element with indices (i,j)."
Data["element(m3:nn n)"] = "Returns the element with indices (i,j)."
Data["elevation(e:v n)"] = "Gets the elevation from the entity to the vector."
Data["elevation(vav n)"] = "Gets the elevation from the first position, at the specified angle, to the second position."
Data["enableClip(h:nn)"] = "Enables/disables clipping for a hologram."
Data["enableGravity(e:n)"] = "Enables/disabled the gravity for a entity."
Data["entity(n e)"] = "Gets the entity associated with the id."
Data["entity(sd: e)"] = "Gets the entity from the sound is playing."
Data["entity(wl: e)"] = "Gets the entity from the wirelink."
Data["exists(t:e n)"] = "Returns 1 if an element exists at an index on the table."
Data["exists(t:n n)"] = "Returns 1 if an element exists at an index on the table."
Data["exists(t:s n)"] = "Returns 1 if an element exists at an index on the table."
Data["exit()"] = "Exits current execution."
Data["exp(n n)"] = "Returns e to the power of the Argument. (same as e()^N but shorter and faster this way)"
Data["explode(s:s t)"] = "Splits the string into an table, along the boundaries formed by the string S."
Data["explodePattern(s:s t)"] = "Splits the string into an table, along the boundaries formed by the pattern S."
Data["eye(e: v)"] = "Gets a players view direction else entity forward direction."
Data["eyeAngles(e: a)"] = "Gets a players view direction."
Data["eyeTrace(e: t)"] = "Returns a trace of the player eye."

// F
Data["fade(sd:n)"] = "Fades out the sound during N seconds."
Data["fade(sd:nn)"] = "Fades out the sound after N1 seconds for N2 seconds."
Data["fileDelete(s)"] = "Deletes the file S from the disk."
Data["fileDelete(sf)"] = "Deletes the file S from the disk and calls F when done."
Data["fileFind(sf)"] = "Searches for the files and directories S and calls F with the parameters: Files[table], Directories[table] and File[file], when done."
Data["filePath(xfl: s)"] = "Gets the path to the file."
Data["find(s:s n)"] = "Returns the 1st occurrence of the string S, returns 0 if not found "
Data["find(s:sn n)"] = "Returns the 1st occurrence of the string S starting at N and going to the end of the string, returns 0 if not found "
Data["findByClass(s t)"] = "Returns a table of all entities of class S."
Data["findByModel(s t)"] = "Returns a table of all entities of model S."
Data["findInBox(vv t)"] = "Returns a table of all entities within inside V1 min and V2 max."
Data["findInCone(vvna t)"] = "Returns a table of all entities within inside a cone."
Data["findInSphere(vn t)"] = "Returns a table of all entities within a distance of N from point V."
Data["findPattern(s:s n)"] = "Returns the 1st occurrence of the string S using REGEX functions, returns 0 if not found. "
Data["findPattern(s:sn n)"] = "Returns the 1st occurrence of the string S starting at N and going to the end of the string using REGEX functions, returns 0 if not found. "
Data["floor(a a)"] = "Rounds the argument down to the nearest integer."
Data["floor(n n)"] = "Rounds the argument down to the nearest integer."
Data["floor(v v)"] = "Rounds the argument down to the nearest integer."
Data["forward(a: v)"] = "Gets the forward vector of the angle. (This can also be known as the direction vector)"
Data["frac(n n)"] = "Returns the fractional part of the argument. (same as N - floor(N))"
Data["freeze(e:n)"] = "Modifies the frozen status of a prop. If this is given 0, then the prop will be unfrozen."

// G
Data["g(c: n)"] = "Gets the green property of the color."
Data["gate( e)"] = "Gets the entity of the LemonGate."
Data["gateName( s)"] = "Gets the name of the LemonGate."
Data["gateName(s)"] = "Sets the name of the LemonGate."
Data["getColor(e: c)"] = "Gets the color of the entity."
Data["getColor(h: c)"] = "Gets the color of the hologram."
Data["getConstraints(e: t)"] = "Gets an table with all entities directly or indirectly constrained to E, except E itself."
Data["getMaterial(e: s)"] = "Gets the material of the entity."
Data["getParent(h: h)"] = "Gets the hologram H is parented to."
Data["getParentE(h: e)"] = "Gets the entity H is parented to."
Data["getPlayers( t)"] = "Gest a table of all the players on the server."
Data["getScale(h: v)"] = "Gets the scale of the hologram."
Data["getType(b: s)"] = "Returns the type name of the next object on the buffer when reading."

// H
Data["hasConstraints(e: n)"] = ""
Data["hasInput(wl:s n)"] = ""
Data["hasOutput(wl:s n)"] = ""
Data["heading(e:v a)"] = ""
Data["heading(vav n)"] = ""
Data["health(e: n)"] = ""
Data["hologram( h)"] = ""
Data["hologram(s h)"] = ""
Data["hologram(sv h)"] = ""
Data["holograms( t)"] = ""
Data["hsv2rgb(c: c)"] = ""
Data["hsv2rgb(nnn c)"] = ""
Data["httpPostRequest(stff)"] = ""
Data["httpRequest(sff)"] = ""

// I
Data["identity( m3)"] = ""
Data["identity2( m2)"] = ""
Data["inNoclip(e: n)"] = ""
Data["inVehicle(e: n)"] = ""
Data["index(s:n s)"] = ""
Data["inputType(wl:s s)"] = ""
Data["inrange(aaa n)"] = ""
Data["inrange(nnn n)"] = ""
Data["inrange(vvv n)"] = ""
Data["insert(t:?)"] = ""
Data["insert(t:?e)"] = ""
Data["insert(t:?n)"] = ""
Data["insert(t:?s)"] = ""
Data["insert(t:a)"] = ""
Data["insert(t:ae)"] = ""
Data["insert(t:an)"] = ""
Data["insert(t:as)"] = ""
Data["insert(t:b)"] = ""
Data["insert(t:be)"] = ""
Data["insert(t:bn)"] = ""
Data["insert(t:bs)"] = ""
Data["insert(t:c)"] = ""
Data["insert(t:ce)"] = ""
Data["insert(t:cn)"] = ""
Data["insert(t:cs)"] = ""
Data["insert(t:e)"] = ""
Data["insert(t:ee)"] = ""
Data["insert(t:en)"] = ""
Data["insert(t:es)"] = ""
Data["insert(t:f)"] = ""
Data["insert(t:fe)"] = ""
Data["insert(t:fn)"] = ""
Data["insert(t:fs)"] = ""
Data["insert(t:h)"] = ""
Data["insert(t:he)"] = ""
Data["insert(t:hn)"] = ""
Data["insert(t:hs)"] = ""
Data["insert(t:m2)"] = ""
Data["insert(t:m2e)"] = ""
Data["insert(t:m2n)"] = ""
Data["insert(t:m2s)"] = ""
Data["insert(t:m3)"] = ""
Data["insert(t:m3e)"] = ""
Data["insert(t:m3n)"] = ""
Data["insert(t:m3s)"] = ""
Data["insert(t:n)"] = ""
Data["insert(t:ne)"] = ""
Data["insert(t:nn)"] = ""
Data["insert(t:ns)"] = ""
Data["insert(t:s)"] = ""
Data["insert(t:sd)"] = ""
Data["insert(t:sde)"] = ""
Data["insert(t:sdn)"] = ""
Data["insert(t:sds)"] = ""
Data["insert(t:se)"] = ""
Data["insert(t:sn)"] = ""
Data["insert(t:ss)"] = ""
Data["insert(t:t)"] = ""
Data["insert(t:te)"] = ""
Data["insert(t:tn)"] = ""
Data["insert(t:ts)"] = ""
Data["insert(t:v)"] = ""
Data["insert(t:v2)"] = ""
Data["insert(t:v2e)"] = ""
Data["insert(t:v2n)"] = ""
Data["insert(t:v2s)"] = ""
Data["insert(t:ve)"] = ""
Data["insert(t:vn)"] = ""
Data["insert(t:vs)"] = ""
Data["insert(t:wl)"] = ""
Data["insert(t:wle)"] = ""
Data["insert(t:wln)"] = ""
Data["insert(t:wls)"] = ""
Data["insert(t:xfl)"] = ""
Data["insert(t:xfle)"] = ""
Data["insert(t:xfln)"] = ""
Data["insert(t:xfls)"] = ""
Data["int(n n)"] = ""
Data["isAdmin(e: n)"] = ""
Data["isConstrained(e: n)"] = ""
Data["isFrozen(e: n)"] = ""
Data["isHiSpeed(wl: n)"] = ""
Data["isHologram(e:)"] = ""
Data["isNPC(e: n)"] = ""
Data["isOnFire(e: n)"] = ""
Data["isOnGround(e: n)"] = ""
Data["isPlayer(e: n)"] = ""
Data["isPlayerHolding(e: n)"] = ""
Data["isPlaying(sd: n)"] = ""
Data["isSuperAdmin(e: n)"] = ""
Data["isUnderWater(e: n)"] = ""
Data["isValid(e: n)"] = ""
Data["isValid(h: n)"] = ""
Data["isVehicle(e: n)"] = ""
Data["isWeapon(e: n)"] = ""
Data["isWeldedTo(e: e)"] = ""
Data["isWorld(e: n)"] = ""

// L
Data["left(s:n s)"] = ""
Data["leftClick(e: n)"] = ""
Data["length(s: n)"] = ""
Data["length(t: n)"] = ""
Data["length(v2: n)"] = ""
Data["length(v: n)"] = ""
Data["length2(v2: n)"] = ""
Data["length2(v: n)"] = ""
Data["level(sd: n)"] = ""
Data["level(sd:n)"] = ""
Data["ln(n n)"] = ""
Data["log(nn n)"] = ""
Data["log10(n n)"] = ""
Data["log2(n n)"] = ""
Data["lower(s: s)"] = ""

// M
Data["mRotation(vn m3)"] = ""
Data["map( s)"] = ""
Data["mass(e: n)"] = ""
Data["massCenter(e: v)"] = ""
Data["massCenterWorld(e: v)"] = ""
Data["matchFirst(s:s s)"] = ""
Data["matchFirst(s:sn s)"] = ""
Data["matchPattern(s:s t)"] = ""
Data["matchPattern(s:sn t)"] = ""
Data["matrix( m3)"] = ""
Data["matrix(a m3)"] = ""
Data["matrix(e m3)"] = ""
Data["matrix(m2 m3)"] = ""
Data["matrix(nnnnnnnnn m3)"] = ""
Data["matrix(vvv m3)"] = ""
Data["matrix2( m2)"] = ""
Data["matrix2(m3 m2)"] = ""
Data["matrix2(nnnn m2)"] = ""
Data["matrix2(v2v2 m2)"] = ""
Data["max(nn n)"] = ""
Data["max(nnn n)"] = ""
Data["max(nnnn n)"] = ""
Data["maxHologramClips( n)"] = ""
Data["maxHolograms( n)"] = ""
Data["maxPerf( n)"] = "Returns the maximum performance points the code can use."
Data["min(nn n)"] = ""
Data["min(nnn n)"] = ""
Data["min(nnnn n)"] = ""
Data["model(e: s)"] = ""

// N
Data["name(e: s)"] = ""
Data["normalized(v2: v2)"] = ""
Data["normalized(v: v)"] = ""

// O
Data["openFile(ss xfl)"] = ""
Data["outputType(wl:s s)"] = ""
Data["owner( e)"] = "Returns the owner of the LemonGate."
Data["owner(e: e)"] = ""

// P
Data["p(a: n)"] = ""
Data["parent(e:e)"] = ""
Data["parent(e:h)"] = ""
Data["parent(h:e)"] = ""
Data["parent(h:h)"] = ""
Data["passenger(e: e)"] = ""
Data["path(sd: s)"] = ""
Data["perf( n)"] = "Returns the current used performance points."
Data["perfAvailable( n)"] = ""
Data["perfPer( n)"] = "Returns the percentage of performance points used."
Data["pi( n)"] = ""
Data["ping(e: n)"] = ""
Data["pitch(sd: n)"] = ""
Data["pitch(sd:n)"] = ""
Data["play(sd:)"] = ""
Data["play(sd:n)"] = ""
Data["pos(e: v)"] = ""
Data["pos(h: v)"] = ""
Data["print(...)"] = "Prints all arguments to chat."
Data["propcore( n)"] = ""
Data["propcoreInfo( t)"] = ""
Data["propcoreProps( t)"] = ""
Data["pushClip(h:nvv)"] = ""

// R
Data["r(a: n)"] = ""
Data["r(c: n)"] = ""
Data["radius(e: n)"] = ""
Data["randint(n n)"] = ""
Data["randint(nn n)"] = ""
Data["random( n)"] = ""
Data["random(n n)"] = ""
Data["random(nn n)"] = ""
Data["read(xfl:f)"] = ""
Data["readAngle(b: a)"] = ""
Data["readArray(wl:nn t)"] = ""
Data["readCell(wl:n n)"] = ""
Data["readEntity(b: e)"] = ""
Data["readNumber(b: n)"] = ""
Data["readString(b: s)"] = ""
Data["readVector(b: v)"] = ""
Data["remove(e:)"] = ""
Data["remove(h:)"] = ""
Data["remove(t:e)"] = ""
Data["remove(t:n)"] = ""
Data["remove(t:s)"] = ""
Data["removeClip(h:n)"] = ""
Data["repeat(s:n s)"] = ""
Data["replace(s:ss s)"] = ""
Data["replacePattern(s:ss s)"] = ""
Data["restart(sd:)"] = ""
Data["rgb2hsv(c: c)"] = ""
Data["rgb2hsv(nnn c)"] = ""
Data["right(a: v)"] = ""
Data["right(s:n s)"] = ""
Data["rightClick(e: n)"] = ""
Data["root(nn n)"] = ""
Data["rotate(v:a v)"] = ""
Data["round(a a)"] = ""
Data["round(an a)"] = ""
Data["round(n n)"] = ""
Data["round(nn n)"] = ""
Data["round(v v)"] = ""
Data["round(vn v)"] = ""
Data["row(m2:n v2)"] = ""
Data["row(m3:n v)"] = ""
Data["rowMatrix(vvv m3)"] = ""
Data["rowMatrix2(v2v2 m2)"] = ""

// S
Data["scale(h:v)"] = ""
Data["scaleUnits(h:v)"] = ""
Data["sec(n n)"] = ""
Data["sech(n n)"] = ""
Data["sechr(n n)"] = ""
Data["secr(n n)"] = ""
Data["selfDestruct()"] = "Removes the LemonGate. "
Data["send(b:se)"] = ""
Data["setA(c:n c)"] = ""
Data["setAng(e:a)"] = ""
Data["setAng(h:a)"] = ""
Data["setB(c:n c)"] = ""
Data["setColor(e:c)"] = ""
Data["setColumn(m2:nnn m2)"] = ""
Data["setColumn(m2:nv2 m2)"] = ""
Data["setColumn(m3:nnnn m3)"] = ""
Data["setColumn(m3:nv m3)"] = ""
Data["setDiagonal(m3:nnn m3)"] = ""
Data["setDiagonal(m3:v m3)"] = ""
Data["setElement(m2:nnn m2)"] = ""
Data["setElement(m3:nnn m3)"] = ""
Data["setG(c:n c)"] = ""
Data["setMaterial(e:s)"] = ""
Data["setModel(h:s)"] = ""
Data["setNotSolid(e:n)"] = ""
Data["setP(a:n a)"] = ""
Data["setPos(e:v)"] = ""
Data["setPos(h:v)"] = ""
Data["setR(a:n a)"] = ""
Data["setR(c:n c)"] = ""
Data["setRow(m2:nnn m2)"] = ""
Data["setRow(m2:nv2 m2)"] = ""
Data["setRow(m3:nnnn m3)"] = ""
Data["setRow(m3:nv m3)"] = ""
Data["setX(v2:n)"] = ""
Data["setX(v:n v)"] = ""
Data["setY(a:n a)"] = ""
Data["setY(v2:n)"] = ""
Data["setY(v:n v)"] = ""
Data["setZ(v:n v)"] = ""
Data["shading(h:n)"] = ""
Data["shootPos(e: v)"] = ""
Data["sign(n n)"] = ""
Data["sin(n n)"] = ""
Data["sinh(n n)"] = ""
Data["sinhr(n n)"] = ""
Data["sinr(n n)"] = ""
Data["size(t: n)"] = ""
Data["sound(es sd)"] = ""
Data["sound(esn sd)"] = ""
Data["sound(s sd)"] = ""
Data["sound(sn sd)"] = ""
Data["sounds( t)"] = ""
Data["spawn(s e)"] = ""
Data["spawn(sn e)"] = ""
Data["sqrt(n n)"] = ""
Data["steamID(e: s)"] = ""
Data["stop(sd:)"] = ""
Data["sub(s:n s)"] = ""
Data["sub(s:nn s)"] = ""
Data["swapColumns(m2: m2)"] = ""
Data["swapColumns(m3:nn m3)"] = ""
Data["swapElements(m2:nnnn m2)"] = ""
Data["swapElements(m3:nnnn m3)"] = ""
Data["swapRows(m2: m2)"] = ""
Data["swapRows(m3:nn m3)"] = ""

// T
Data["tan(n n)"] = ""
Data["tanh(n n)"] = ""
Data["tanhr(n n)"] = ""
Data["tanr(n n)"] = ""
Data["time(s n)"] = "Returns the server time in unit S"
Data["timeConnected(e: n)"] = ""
Data["timerAdjust(snn)"] = ""
Data["timerCreate(snnf)"] = ""
Data["timerPause(s n)"] = ""
Data["timerRemove(s)"] = ""
Data["timerStart(s n)"] = ""
Data["timerStatus(s n)"] = ""
Data["timerStop(s n)"] = ""
Data["timerUnpause(s n)"] = ""
Data["toAngle(m3: a)"] = ""
Data["toAngle(v2: n)"] = ""
Data["toAngle(v: a)"] = ""
Data["toAngle(v:v a)"] = ""
Data["toByte(s n)"] = ""
Data["toByte(sn n)"] = ""
Data["toChar(n s)"] = ""
Data["toDeg(n n)"] = ""
Data["toLocal(e:a a)"] = ""
Data["toLocal(e:v v)"] = ""
Data["toLocal(vava v)"] = ""
Data["toLocalAngle(vava a)"] = ""
Data["toNumber(s n)"] = ""
Data["toNumber(s: n)"] = ""
Data["toRad(n n)"] = ""
Data["toString(a s)"] = ""
Data["toString(a: s)"] = ""
Data["toString(e s)"] = ""
Data["toString(e: s)"] = ""
Data["toString(n s)"] = ""
Data["toString(n: s)"] = ""
Data["toString(v s)"] = ""
Data["toString(v2 s)"] = ""
Data["toString(v2: s)"] = ""
Data["toString(v: sd)"] = ""
Data["toWorld(e:a a)"] = ""
Data["toWorld(e:v v)"] = ""
Data["toWorld(vava v)"] = ""
Data["toWorldAngle(vava v)"] = ""
Data["trace(m2 n)"] = ""
Data["trace(m3 n)"] = ""
Data["trace(vv t)"] = "Returns a trace between V1 and V2."
Data["trace(vvn t)"] = "Same as t = trace(vv), but the trace can hit water when N is 1."
Data["trace(vvnt t)"] = "Same as y = trace(vvn), but T is a table of entities to filter."
Data["trace(vvvn t)"] = ""
Data["trace(vvvnt t)"] = ""
Data["traceHull(vvv t)"] = "Returns a hull trace between V1 and V2 where V3 is boxsize."
Data["transpose(m2 m2)"] = ""
Data["transpose(m3 m3)"] = ""
Data["trim(s: s)"] = ""
Data["trim(s:s s)"] = ""
Data["trimLeft(s: s)"] = ""
Data["trimLeft(s:s s)"] = ""
Data["trimRight(s: s)"] = ""
Data["trimRight(s:s s)"] = ""
Data["type(? s)"] = ""
Data["type(a s)"] = ""
Data["type(b s)"] = ""
Data["type(c s)"] = ""
Data["type(e s)"] = ""
Data["type(f s)"] = ""
Data["type(h s)"] = ""
Data["type(m2 s)"] = ""
Data["type(m3 s)"] = ""
Data["type(n s)"] = ""
Data["type(s s)"] = ""
Data["type(sd s)"] = ""
Data["type(t s)"] = ""
Data["type(t:e s)"] = ""
Data["type(t:n s)"] = ""
Data["type(t:s s)"] = ""
Data["type(v s)"] = ""
Data["type(v2 s)"] = ""
Data["type(wl s)"] = ""
Data["type(xfl s)"] = ""

// U
Data["unparent(e:)"] = ""
Data["up(a: v)"] = ""
Data["upper(s: s)"] = ""

// V
Data["vec(nnn v)"] = ""
Data["vec2(nn v2)"] = ""
Data["vec2(v v2)"] = ""
Data["vehicle(e: e)"] = ""
Data["vel(e: v)"] = ""
Data["visible(h:n)"] = ""
Data["voidEntity( e)"] = ""
Data["volume(sd: n)"] = ""
Data["volume(sd:n)"] = ""

// W
Data["write(xfl:s)"] = ""
Data["write(xfl:sf)"] = ""
Data["writeAngle(b:a)"] = ""
Data["writeCell(wl:nn n)"] = ""
Data["writeEntity(b:e)"] = ""
Data["writeNumber(b:n)"] = ""
Data["writeString(b:s)"] = ""
Data["writeString(wl:snn)"] = ""
Data["writeString(wl:snnc)"] = ""
Data["writeString(wl:snncc)"] = ""
Data["writeString(wl:snnccn)"] = ""
Data["writeString(wl:snncn)"] = ""
Data["writeString(wl:snncnn)"] = ""
Data["writeString(wl:snnn)"] = ""
Data["writeString(wl:snnnc)"] = ""
Data["writeString(wl:snnncn)"] = ""
Data["writeString(wl:snnnn)"] = ""
Data["writeString(wl:snnnnn)"] = ""
Data["writeVector(b:v)"] = ""

// X
Data["x(m3: v)"] = ""
Data["x(v2: n)"] = ""
Data["x(v: n)"] = ""

// Y
Data["y(a: n)"] = ""
Data["y(m3: v)"] = ""
Data["y(v2: n)"] = ""
Data["y(v: n)"] = ""

// Z
Data["z(m3: v)"] = ""
Data["z(v: n)"] = ""