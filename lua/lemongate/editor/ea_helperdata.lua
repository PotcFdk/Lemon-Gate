local Data = LEMON.API.HelperData

/*---------------------------------------------------------------------------
	Total functions: 504
	Total events: 12
	
	Documented functions: 92
	Documented events: 0
	
	Undocumented functions: 412
	Undocumented events: 12
	
	Generated at: 07/22/13 15:01:54
---------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------
	Events
---------------------------------------------------------------------------*/

// F
Data["final<>"] = ""

// K
Data["keypress<n>"] = ""
Data["keyrelease<n>"] = ""

// L
Data["loadFromDupe<p>"] = ""

// P
Data["playerChat<es s>"] = ""
Data["playerJoin<e>"] = ""
Data["playerQuit<e>"] = ""

// R
Data["receiveBuffer<sep>"] = ""

// S
Data["saveToDupe< p>"] = ""

// T
Data["think<>"] = ""
Data["tick<>"] = ""
Data["trigger<s>"] = ""

/*---------------------------------------------------------------------------
	Functions
---------------------------------------------------------------------------*/

// A
Data["aabbMax(e: v)"] = "Return axis-aligned maximum bounding box of entity."
Data["aabbMin(e: v)"] = "Return axis-aligned minimum bounding box of entity."
Data["abs(n n)"] = "Returns absolute value of (number)."
Data["acos(n n)"] = "Returns inverse cosine of (number degrees)."
Data["acosr(n n)"] = "Returns inverse cosine of (number radians)."
Data["aimEntity(e: e)"] = "Returns the aim entity of entity (must be a player)."
Data["aimNormal(e: v)"] = "Returns the aim hit normal of entity (must be a player)."
Data["aimPos(e: v)"] = "Returns the aim position of entity (must be a player)."
Data["alpha(c: n)"] = "Returns the alpha value of a color."
Data["ang(e: a)"] = "Returns angles PYR of entity."
Data["ang(nnn a)"] = "Creates an angle PYR."
Data["angVel(e: a)"] = "Returns angular velocity of entity."
Data["angnorm(a a)"] = "Wraps the components of an angle between -180 and 180."
Data["applyAngForce(e:a)"] = "Applies an angular force to entity."
Data["applyForce(e:v)"] = "Applies a vector force to entity."
Data["applyOffsetForce(e:vv)"] = "Applies an offset vector force to entity."
Data["armor(e: n)"] = "Returns the armor of entity (must be a player)."
Data["asin(n n)"] = "Returns inverse sine of (number degrees)."
Data["asinr(n n)"] = "Returns inverse sine (number radians)."
Data["atan(n n)"] = "Returns inverse tangent of (number degrees)."
Data["atan(nn n)"] = "Returns inverse tangent of (number degrees)."
Data["atanr(n n)"] = "Returns inverse tangent (number radians)."
Data["atanr(nn n)"] = "Returns inverse tangent (number radians)."

// B
Data["bearing(e:v n)"] = "Returns bearing between entity and target vector."
Data["bearing(vav n)"] = "Return bearing between a vector facing an angle and a target vector."
Data["blue(c: n)"] = "Returns blue value of a color."
Data["boxCenter(e: v)"] = "Returns center of entity's bounding box."
Data["boxMax(e: v)"] = "Returns highest corner of entity's bounding box."
Data["boxMin(e: v)"] = "Returns lowest corner of entity's bounding box."
Data["boxSize(e: v)"] = "Returns size of entity's bounding box."
Data["buffer( p)"] = ""

// C
Data["cbrt(n n)"] = "Returns cube root of (number)."
Data["ceil(n n)"] = "Rounds (number) up to nearest integer."
Data["ceil(nn n)"] = "Rounds (number 1) up to (number 2)'s decimal precision."
Data["ceil(v v)"] = " Rounds components of (vector XYZ) up to nearest integer."
Data["ceil(vn v)"] = "Rounds (vector XYZ) up to (number)'s decimal precision."
Data["clamp(nnn n)"] = "Clamps (number value) between (number min) and (number max)."
Data["clamp(vvv v)"] = "Clamps (vector value) between (vector  min) and (vector  max)."
Data["class(e: s)"] = "Returns class of entity."
Data["clearFilter(xtr)"] = ""
Data["color(nnn c)"] = "Creates a color RGB."
Data["color(nnnn c)"] = "Creates a color RGBA."
Data["copy(t: t)"] = "Copies a table to a new table."
Data["cos(n n)"] = "Returns cosine of (number degrees)."
Data["cosh(n n)"] = "Returns hyperbolic cosine of (number degrees)."
Data["coshr(n n)"] = "Returns hyperbolic cosine of (number radians)."
Data["cosr(n n)"] = "Returns cosine of (number radians)."
Data["cot(n n)"] = "Returns cotangent of (number degrees)."
Data["coth(n n)"] = "Returns hyperbolic cotangent of (number degrees)."
Data["cothr(n n)"] = "Returns hyperbolic cotangent of (number radians)."
Data["cotr(n n)"] = "Returns cotangent of (number radians)."
Data["count(t: n)"] = "Returns the amount of entries in a table."
Data["cross(v:v v)"] = "Return the cross product (a vector perpendicular to both vectors)."
Data["cross(xv2:v xv2)"] = "Return the cross product (a vector perpendicular to both vectors)."
Data["csc(n n)"] = "Returns cosecant of (number degrees)."
Data["csch(n n)"] = "Returns hyperbolic cosecant of (number degrees)."
Data["cschr(n n)"] = "Returns hyperbolic cosecant of (number radians)."
Data["cscr(n n)"] = "Returns cosecant of (number radians)."
Data["curTime( n)"] = "Returns time since server start in seconds."

// D
Data["distance(v:v n)"] = "Return distance between two vectors."
Data["distance(xv2:v n)"] = "Return distance between two vectors."
Data["distance2(v:v n)"] = "Returns squared distance between two vectors."
Data["dot(v:v n)"] = "Returns the dot product (the sum of the product of the corresponding vector components)."
Data["dot(xv2:v n)"] = "Returns the dot product (the sum of the product of the corresponding vector components)."
Data["driver(e: e)"] = "Returns the driver of entity (must be a vehicle)."
Data["duration(xsd: n)"] = ""
Data["duration(xsd:n)"] = ""

// E
Data["elevation(e:v n)"] = "Returns elevation between entity and target vector."
Data["elevation(vav n)"] = "Return elevation between a vector facing an angle and a target vector."
Data["enableClip(h:nb)"] = ""
Data["enableGravity(e:b)"] = "Enables or disables gravity of entity."
Data["endPos(xtr:v)"] = ""
Data["entity(n e)"] = "Returns entity associated with (number id)."
Data["entity(xsd: s)"] = ""
Data["entity(xtr: e)"] = ""
Data["entity(xwl: e)"] = ""
Data["exists(t:e b)"] = "Returns true if (entity) exists in the table."
Data["exists(t:n b)"] = "Returns true if (number) exists in the table."
Data["exists(t:s b)"] = "Returns true if (string) exists in the table."
Data["exp(n n)"] = "Returns constant e (2.71828) to the power of (number)."
Data["explode(s:s t)"] = "Explodes a string into a table, each entry separated by (string)."
Data["explodePattern(s:s t)"] = ""
Data["eye(e: v)"] = "Returns the direction entity's eyes are facing (must be a player)."
Data["eyeAngles(e: a)"] = "Returns the angles of entity's eyes (must be a player)."
Data["eyeTrace(e: xtr)"] = "Returns a trace table using the entity's eye direction (must be a player)."

// F
Data["fade(xsd:n)"] = ""
Data["fade(xsd:nn)"] = ""
Data["filter(xtr:e)"] = ""
Data["find(s:s n)"] = ""
Data["find(s:sn n)"] = ""
Data["findByClass(s t)"] = ""
Data["findByModel(s t)"] = ""
Data["findInBox(vv t)"] = ""
Data["findInCone(vvna t)"] = ""
Data["findInSphere(vn t)"] = ""
Data["findPattern(s:s n)"] = ""
Data["findPattern(s:sn n)"] = ""
Data["floor(n n)"] = ""
Data["floor(v v)"] = ""
Data["forward(a: a)"] = ""
Data["frac(n n)"] = ""
Data["fraction(xtr: n)"] = ""
Data["fractionLeftSolid(xtr: n)"] = ""
Data["freeze(e:b)"] = ""

// G
Data["gateName( s)"] = ""
Data["gateName(s)"] = ""
Data["getColor(e: c)"] = ""
Data["getColor(h: c)"] = ""
Data["getConstraints(e: t)"] = ""
Data["getHitState(xtr: n)"] = ""
Data["getMaterial(e: s)"] = ""
Data["getParent(h: e)"] = "Gets the parent entity of a hologram"
Data["getParentHolo(h: h)"] = "Gets the parent hologram of a hologram"
Data["getPlayers( t)"] = ""
Data["getScale(h: v)"] = ""
Data["getTable(!: t)"] = "Returns information table of exception."
Data["green(c: n)"] = "Gets the green of a angle"

// H
Data["hardPerf( n)"] = ""
Data["hasConstraints(e: n)"] = ""
Data["hasInput(xwl:s b)"] = ""
Data["hasKinect(e: b)"] = "Returns true if player (E) has a kinect."
Data["hasOutput(xwl:s b)"] = ""
Data["heading(e:v a)"] = ""
Data["heading(vav a)"] = ""
Data["health(e: n)"] = ""
Data["hit(xtr: b)"] = ""
Data["hitAll(xtr:)"] = ""
Data["hitAuxilory(xtr:b)"] = ""
Data["hitBone(xtr: n)"] = ""
Data["hitBox(xtr: n)"] = ""
Data["hitDebris(xtr:b)"] = ""
Data["hitDetail(xtr:b)"] = ""
Data["hitGrate(xtr:b)"] = ""
Data["hitGroup(xtr: n)"] = ""
Data["hitHitboxes(xtr:b)"] = ""
Data["hitLadders(xtr:b)"] = ""
Data["hitMaterial(xtr: n)"] = ""
Data["hitMoveable(xtr:b)"] = ""
Data["hitNPC(xtr:b)"] = ""
Data["hitNPCClip(xtr:b)"] = ""
Data["hitNoDraw(xtr: b)"] = ""
Data["hitNonWorld(xtr: b)"] = ""
Data["hitNormal(xtr: v)"] = ""
Data["hitOpaque(xtr:b)"] = ""
Data["hitOrigin(xtr:b)"] = ""
Data["hitPlayerClip(xtr:b)"] = ""
Data["hitPortal(xtr:b)"] = ""
Data["hitPos(xtr: v)"] = ""
Data["hitSky(xtr: b)"] = ""
Data["hitSlime(xtr:b)"] = ""
Data["hitSolid(xtr:b)"] = ""
Data["hitTexture(xtr: s)"] = ""
Data["hitTranslucent(xtr:b)"] = ""
Data["hitWater(xtr:b)"] = ""
Data["hitWindows(xtr:b)"] = ""
Data["hitWorld(xtr: b)"] = ""
Data["hologram( h)"] = ""
Data["hologram(s h)"] = ""
Data["hologram(sv h)"] = ""
Data["holograms( t)"] = ""
Data["hsv2rgb(c: c)"] = ""
Data["hsv2rgb(nnn c)"] = ""
Data["httpPostRequest(stff)"] = ""
Data["httpRequest(sff)"] = ""

// I
Data["ignoreNoDraw(xtr:b)"] = ""
Data["inNoclip(e: b)"] = ""
Data["index(s:n s)"] = ""
Data["inertia(e: v)"] = ""
Data["inertiaA(e: a)"] = "Shifts vector inertia into angular form."
Data["inputType(xwl:s s)"] = ""
Data["inrange(aaa b)"] = ""
Data["inrange(nnn n)"] = ""
Data["inrange(vvv b)"] = ""
Data["insert(t:!)"] = ""
Data["insert(t:?)"] = ""
Data["insert(t:a)"] = ""
Data["insert(t:b)"] = ""
Data["insert(t:c)"] = ""
Data["insert(t:e)"] = ""
Data["insert(t:f)"] = ""
Data["insert(t:h)"] = ""
Data["insert(t:n!)"] = ""
Data["insert(t:n)"] = ""
Data["insert(t:n?)"] = ""
Data["insert(t:na)"] = ""
Data["insert(t:nb)"] = ""
Data["insert(t:nc)"] = ""
Data["insert(t:ne)"] = ""
Data["insert(t:nf)"] = ""
Data["insert(t:nh)"] = ""
Data["insert(t:nn)"] = ""
Data["insert(t:np)"] = ""
Data["insert(t:ns)"] = ""
Data["insert(t:nt)"] = ""
Data["insert(t:nv)"] = ""
Data["insert(t:nxsd)"] = ""
Data["insert(t:nxtr)"] = ""
Data["insert(t:nxv2)"] = ""
Data["insert(t:nxwl)"] = ""
Data["insert(t:p)"] = ""
Data["insert(t:s)"] = ""
Data["insert(t:t)"] = ""
Data["insert(t:v)"] = ""
Data["insert(t:xsd)"] = ""
Data["insert(t:xtr)"] = ""
Data["insert(t:xv2)"] = ""
Data["insert(t:xwl)"] = ""
Data["int(n n)"] = ""
Data["isAdmin(e: b)"] = ""
Data["isConstrained(e: b)"] = ""
Data["isFrozen(e: b)"] = ""
Data["isHiSpeed(xwl: b)"] = ""
Data["isHologram(e: b)"] = ""
Data["isNPC(e: b)"] = ""
Data["isOnFire(e: b)"] = ""
Data["isOnGround(e: b)"] = ""
Data["isPlayer(e: b)"] = ""
Data["isPlayerHolding(e: b)"] = ""
Data["isPlaying(xsd: b)"] = ""
Data["isSuperAdmin(e: b)"] = ""
Data["isUnderWater(e: b)"] = ""
Data["isValid(e: b)"] = ""
Data["isVehicle(e: b)"] = ""
Data["isWeapon(e: b)"] = ""
Data["isWeldedTo(e: e)"] = ""
Data["isWorld(e: b)"] = ""

Data["include(s)"] = "Include a file."
Data["include(sb)"] = "Include a file."

// K
Data["kinectActive(e: b)"] = "Returns true if player's (E) kinect is active."
Data["kinectHead(e: v)"] = "Gets a position from the players motion sensor."
Data["kinectHip(e: v)"] = "Gets a position from the players motion sensor."
Data["kinectLeftAnkle(e: v)"] = "Gets a position from the players motion sensor."
Data["kinectLeftElbow(e: v)"] = "Gets a position from the players motion sensor."
Data["kinectLeftFoot(e: v)"] = "Gets a position from the players motion sensor."
Data["kinectLeftHand(e: v)"] = "Gets a position from the players motion sensor."
Data["kinectLeftHip(e: v)"] = "Gets a position from the players motion sensor."
Data["kinectLeftKnee(e: v)"] = "Gets a position from the players motion sensor."
Data["kinectLeftShoulder(e: v)"] = "Gets a position from the players motion sensor."
Data["kinectLeftWrist(e: v)"] = "Gets a position from the players motion sensor."
Data["kinectRightAnkle(e: v)"] = "Gets a position from the players motion sensor."
Data["kinectRightElbow(e: v)"] = "Gets a position from the players motion sensor."
Data["kinectRightFoot(e: v)"] = "Gets a position from the players motion sensor."
Data["kinectRightHand(e: v)"] = "Gets a position from the players motion sensor."
Data["kinectRightHip(e: v)"] = "Gets a position from the players motion sensor."
Data["kinectRightKnee(e: v)"] = "Gets a position from the players motion sensor."
Data["kinectRightShoulder(e: v)"] = "Gets a position from the players motion sensor."
Data["kinectRightWrist(e: v)"] = "Gets a position from the players motion sensor."
Data["kinectShoulder(e: v)"] = "Gets a position from the players motion sensor."
Data["kinectSpine(e: v)"] = "Gets a position from the players motion sensor."

// L
Data["left(s:n s)"] = ""
Data["leftClick(e: b)"] = ""
Data["length(s: n)"] = "Returns the length of a string"
Data["length(v: n)"] = "Get the lengh of a vector."
Data["length(xv2: n)"] = "Get the lengh of a vector."
Data["length2(v: n)"] = ""
Data["level(xsd: n)"] = ""
Data["level(xsd:n)"] = ""
Data["ln(n n)"] = ""
Data["log(nn n)"] = ""
Data["log10(n n)"] = ""
Data["log2(n n)"] = ""
Data["lower(s: s)"] = ""

// M
Data["map( s)"] = ""
Data["mass(e: n)"] = ""
Data["massCenter(e: v)"] = ""
Data["massCenterWorld(e: v)"] = ""
Data["matchFirst(s:s s)"] = ""
Data["matchFirst(s:sn s)"] = ""
Data["matchPattern(s:s t)"] = ""
Data["matchPattern(s:sn t)"] = ""
Data["math.Clamp(aaa a)"] = ""
Data["max(nn n)"] = ""
Data["max(nnn n)"] = ""
Data["max(nnnn n)"] = ""
Data["max(nnnnn n)"] = ""
Data["maxHologramClips( n)"] = ""
Data["maxHolograms( n)"] = ""
Data["maxPerf( n)"] = ""
Data["message(!: s)"] = "Returns the current exceptions message"
Data["min(nn n)"] = ""
Data["min(nnn n)"] = ""
Data["min(nnnn n)"] = ""
Data["min(nnnnn n)"] = ""
Data["mix(aan a)"] = "Linearly interpolate between two angles"
Data["mix(nnn n)"] = "Linearly interpolate between two numbers"
Data["mix(vvn v)"] = "Linearly interpolate between two vectors"
Data["mix(xv2xv2n xv2)"] = "Linearly interpolate between two 2D vectors"
Data["model(e: s)"] = ""

// N
Data["name(e: s)"] = ""
Data["normal(xtr: v)"] = ""
Data["normalized(v: v)"] = ""
Data["normalized(xv2: xv2)"] = ""

// O
Data["outputType(xwl:s s)"] = ""
Data["owner( e)"] = "Gets the owner of the executing lemongate."
Data["owner(e: b)"] = ""

// P
Data["p(a: n)"] = "Gets the pitch of a angle"
Data["parent(e:e)"] = "Sets the parent of a entity"
Data["parent(h:e)"] = "Sets the parent of a hologram"
Data["passenger(e: e)"] = ""
Data["path(xsd: s)"] = ""
Data["perf( n)"] = ""
Data["pi( n)"] = ""
Data["ping(e: n)"] = ""
Data["pitch(xsd: n)"] = ""
Data["pitch(xsd:n)"] = ""
Data["play(xsd:)"] = ""
Data["play(xsd:n)"] = ""
Data["pos(e: v)"] = ""
Data["propcore( t)"] = ""
Data["pushClip(h:nvv)"] = ""

// R
Data["r(a: n)"] = "Gets the roll of a angle"
Data["radius(e: n)"] = ""
Data["random( n)"] = ""
Data["random(n n)"] = ""
Data["readAngle(p: a)"] = ""
Data["readArray(xwl:nn t)"] = ""
Data["readCell(xwl:n n)"] = ""
Data["readEntity(p: e)"] = ""
Data["readNumber(p: n)"] = ""
Data["readPos(p n)"] = ""
Data["readString(p: s)"] = ""
Data["readVector(p: v)"] = ""
Data["red(c: n)"] = "Gets the red of a angle"
Data["remove(e:)"] = ""
Data["remove(h:)"] = ""
Data["remove(t:e)"] = ""
Data["remove(t:n)"] = ""
Data["remove(t:s)"] = ""
Data["removeClip(h:n)"] = ""
Data["repeat(s:n s)"] = ""
Data["replace(s:ss n)"] = ""
Data["replacePattern(s:ss s)"] = ""
Data["restart(xsd:)"] = ""
Data["rgb2hsv(c: c)"] = ""
Data["rgb2hsv(nnn c)"] = ""
Data["right(a: a)"] = ""
Data["right(s:n s)"] = ""
Data["rightClick(e: b)"] = ""
Data["root(nn n)"] = ""
Data["rotate(v:a v)"] = ""
Data["round(n n)"] = ""
Data["round(nn n)"] = ""
Data["round(v v)"] = ""
Data["round(vn v)"] = ""

// S
Data["scale(h:v)"] = ""
Data["scaleUnits(h:v)"] = ""
Data["sec(n n)"] = ""
Data["sech(n n)"] = ""
Data["sechr(n n)"] = ""
Data["secr(n n)"] = ""
Data["self( e)"] = "Gets the entity of the executing lemongate."
Data["selfDestruct( e)"] = ""
Data["send(p:se)"] = ""
Data["setAlpha(c:n c)"] = "Sets the alpha of a angle"
Data["setAng(e:a)"] = ""
Data["setAng(h:a)"] = ""
Data["setBlue(c:n c)"] = "Sets the blue of a angle"
Data["setColor(e:c)"] = ""
Data["setGreen(c:n c)"] = "Sets the green of a angle"
Data["setHitState(xtr:n)"] = ""
Data["setMaterial(e:s)"] = ""
Data["setModel(h:s)"] = ""
Data["setNotSolid(e:b)"] = ""
Data["setPitch(a:n a)"] = "Sets the pitch of a angle"
Data["setPos(e:v)"] = ""
Data["setPos(h:v)"] = ""
Data["setRed(c:n c)"] = "Sets the red of a angle"
Data["setRoll(a:n a)"] = "Sets the roll of a angle"
Data["setX(v:n v)"] = "Sets the X of a vector"
Data["setX(xv2:n xv2)"] = "Sets the X of a vector"
Data["setY(v:n v)"] = "Sets the Y of a vector"
Data["setY(xv2:n xv2)"] = "Sets the Y of a vector"
Data["setYaw(a:n a)"] = "Sets the yaw of a angle"
Data["setZ(v:n v)"] = "Sets the Z of a vector"
Data["shading(h:b)"] = ""
Data["shiftL(a a)"] = ""
Data["shiftL(v v)"] = ""
Data["shiftR(a a)"] = ""
Data["shiftR(v v)"] = ""
Data["shootPos(e: v)"] = ""
Data["sign(n n)"] = ""
Data["sin(n n)"] = ""
Data["sinh(n n)"] = ""
Data["sinhr(n n)"] = ""
Data["sinr(n n)"] = ""
Data["size(t: n)"] = ""
Data["skip(p:)"] = ""
Data["softPerf( n)"] = ""
Data["sound(es xsd)"] = ""
Data["sound(esn xsd)"] = ""
Data["sound(s xsd)"] = ""
Data["sound(sn xsd)"] = ""
Data["sounds( t)"] = ""
Data["spawn(s e)"] = ""
Data["spawn(sb e)"] = ""
Data["spawnedProps( t)"] = ""
Data["sqrt(n n)"] = ""
Data["startKinect(e:)"] = "Activates a players motion sensor."
Data["startPos(xtr:v)"] = ""
Data["startSolid(xtr: b)"] = ""
Data["steamID(e: s)"] = ""
Data["stop(xsd:)"] = ""
Data["sub(s:n s)"] = ""
Data["sub(s:nn s)"] = ""

// T
Data["tan(n n)"] = ""
Data["tanh(n n)"] = ""
Data["tanhr(n n)"] = ""
Data["tanr(n n)"] = ""
Data["tau( n)"] = ""
Data["throw(s)"] = "Throws a user exception with a message."
Data["throw(st)"] = "Throws a user exception with a message with a table."
Data["timeConnected(e: n)"] = ""
Data["timerAdjust(snn)"] = ""
Data["timerCreate(snnf)"] = ""
Data["timerPause(s n)"] = ""
Data["timerRemove(s)"] = ""
Data["timerStart(s n)"] = ""
Data["timerStatus(s n)"] = ""
Data["timerStop(s n)"] = ""
Data["timerUnpause(s n)"] = ""
Data["toAngle(v: a)"] = ""
Data["toAngle(v:v a)"] = ""
Data["toByte(s n)"] = ""
Data["toChar(n s)"] = ""
Data["toDeg(n n)"] = ""
Data["toLocal(e:a a)"] = ""
Data["toLocal(e:v v)"] = ""
Data["toLocal(vava v)"] = ""
Data["toLocalAngle(vava v)"] = ""
Data["toRad(n n)"] = ""
Data["toString(c: s)"] = ""
Data["toWorld(e:a a)"] = ""
Data["toWorld(e:v v)"] = ""
Data["toWorld(vava v)"] = ""
Data["toWorldAngle(vava v)"] = ""
Data["tostring(? s)"] = ""
Data["trace( xtr)"] = ""
Data["trace(!: t)"] = "Returns a table of traces on the stack."
Data["trace(!:n t)"] = "Returns a trace at stack position N"
Data["trace(vv xtr)"] = ""
Data["trace(vvn xtr)"] = ""
Data["trim(s: s)"] = ""
Data["trim(s:s s)"] = ""
Data["trimLeft(s:s s)"] = ""
Data["trimRight(s:s s)"] = ""
Data["type(! s)"] = "A usless function that ways returns \"exception\""
Data["type(!: s)"] = "Returns the true type of an Exception"
Data["type(? s)"] = "A usless function that ways returns \"variant\""
Data["type(a s)"] = "A usless function that ways returns \"angle\""
Data["type(b s)"] = "A usless function that ways returns \"boolean\""
Data["type(c s)"] = "A usless function that ways returns \"color\""
Data["type(e s)"] = "A usless function that ways returns \"entity\""
Data["type(f s)"] = "A usless function that ways returns \"function\""
Data["type(h s)"] = "A usless function that ways returns \"hologram\""
Data["type(n s)"] = "A usless function that ways returns \"number\""
Data["type(p s)"] = "A usless function that ways returns \"buffer\""
Data["type(p: s)"] = ""
Data["type(p:n s)"] = ""
Data["type(s s)"] = "A usless function that ways returns \"string\""
Data["type(t s)"] = "A usless function that ways returns \"table\""
Data["type(t:e s)"] = ""
Data["type(t:n s)"] = ""
Data["type(t:s s)"] = ""
Data["type(v s)"] = "A usless function that ways returns \"vector\""
Data["type(xsd s)"] = "A usless function that ways returns \"sound\""
Data["type(xtr s)"] = "A usless function that ways returns \"trace\""
Data["type(xv2 s)"] = "A usless function that ways returns \"vector2\""
Data["type(xwl s)"] = "A usless function that ways returns \"wirelink\""

// U
Data["up(a: a)"] = ""
Data["update(xtr:)"] = ""
Data["upper(s: s)"] = ""
Data["useLineOfSight(xtr:b)"] = ""

// V
Data["vec(nnn v)"] = "Creates a 3 dimentional vector."
Data["vec2(nn xv2)"] = "Creates a 2 dimentional vector."
Data["vehicle(e: e)"] = ""
Data["vel(e: v)"] = ""
Data["visible(h:b)"] = ""
Data["voidEntity( e)"] = ""
Data["volume(xsd: n)"] = ""
Data["volume(xsd:n)"] = ""

// W
Data["writeAngle(p:a)"] = ""
Data["writeCell(xwl:nn b)"] = ""
Data["writeEntity(p:e)"] = ""
Data["writeNumber(p:n)"] = ""
Data["writePos(p n)"] = ""
Data["writeString(p:s)"] = ""
Data["writeString(xwl:snn)"] = ""
Data["writeString(xwl:snnc)"] = ""
Data["writeString(xwl:snncc)"] = ""
Data["writeString(xwl:snnccb)"] = ""
Data["writeString(xwl:snncn)"] = ""
Data["writeString(xwl:snncnb)"] = ""
Data["writeString(xwl:snnn)"] = ""
Data["writeString(xwl:snnnc)"] = ""
Data["writeString(xwl:snnncb)"] = ""
Data["writeString(xwl:snnnn)"] = ""
Data["writeString(xwl:snnnnb)"] = ""
Data["writeVector(p:v)"] = ""

// X
Data["x(v: n)"] = "Gets the X of a vector"
Data["x(xv2: n)"] = "Gets the X of a vector"

// Y
Data["y(a: n)"] = "Gets the yaw of a angle"
Data["y(v: n)"] = "Gets the Z of a vector"
Data["y(xv2: n)"] = "Gets the Z of a vector"

// Z
Data["z(v: n)"] = "Gets the Z of a vector"