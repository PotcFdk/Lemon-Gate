local Data = LEMON.API.HelperData

/*---------------------------------------------------------------------------
	Total functions: 672
	Total events: 12
	
	Documented functions: 529
	Documented events: 9
	
	Undocumented functions: 143
	Undocumented events: 3
	
	Generated at: 07/31/13 20:55:01
---------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------
	Events
---------------------------------------------------------------------------*/
// D
Data["dupeFinished<>"] = "Called once the advanced duplicator has finished pasting the chip and all constrained entitys."

// F
Data["final<>"] = "Called just before the chip is removed."

// K
Data["keypress<n>"] = "Called when the owner of the gate presses down a key (key is given as ascii)."
Data["keyrelease<n>"] = "Called when the owner of the gate releases a key (key is given as ascii)."

// L
Data["loadFromDupe<xbf>"] = ""

// P
Data["playerChat<es s>"] = "Called when a player says somthing, Return string to change what is said."
Data["playerJoin<e>"] = "Called when a player joins the server."
Data["playerQuit<e>"] = "Called when a player leaves the server."

// R
Data["receiveBuffer<sexbf>"] = ""

// S
Data["saveToDupe< xbf>"] = ""

// T
Data["think<>"] = "Called every think."
Data["tick<>"] = "Called every tick."
Data["trigger<s>"] = "Called when an input changes, (string) is the name of the input."

/*---------------------------------------------------------------------------
	Functions
---------------------------------------------------------------------------*/

// A
Data["aabbMax(e: v)"] = "Return the axis-aligned maximum bounding box of an entity."
Data["aabbMax(p: v)"] = ""
Data["aabbMin(e: v)"] = "Return the axis-aligned minimum bounding box of an entity."
Data["aabbMin(p: v)"] = ""
Data["abs(n n)"] = "Returns the absolute value of (number)."
Data["abs(q n)"] = ""
Data["acos(n n)"] = "Returns the inverse cosine of (number degrees)."
Data["acosr(n n)"] = "Returns the inverse cosine of (number radians)."
Data["advBallsocketTo(e:evvnnvvvn)"] = "entity1:advBallsocketTo(entity2, local pos1, local pos2, force limit, torque limit, xyz min, xyz max, xyz friction, 1/0 free rotation)"
Data["aimEntity(e: e)"] = "Returns the aim entity of an entity (entity must be a player)."
Data["aimNormal(e: v)"] = "Returns the aim hit normal of an entity (entity must be a player)."
Data["aimPos(e: v)"] = "Returns the aim position of an entity (entity must be a player)."
Data["alpha(c: n)"] = "Returns the alpha value of a color."
Data["ang(e: a)"] = "Returns the angles PYR of an entity."
Data["ang(nnn a)"] = "Creates an angle PYR."
Data["ang(p: a)"] = ""
Data["angVel(e: a)"] = "Returns the angular velocity of an entity."
Data["angVel(p: a)"] = ""
Data["angVelVector(e: v)"] = ""
Data["angVelVector(p: v)"] = ""
Data["angnorm(a a)"] = "Wraps the components of an angle between -180 and 180."
Data["applyAngForce(e:a)"] = "Applies an angular force to entity."
Data["applyAngForce(p:a)"] = ""
Data["applyForce(e:v)"] = "Applies a vector force to entity."
Data["applyForce(p:v)"] = ""
Data["applyOffsetForce(e:vv)"] = "Applies an offset vector force to entity."
Data["applyOffsetForce(p:vv)"] = ""
Data["applyTorque(e:v)"] = ""
Data["applyTorque(p:v)"] = ""
Data["armor(e: n)"] = "Returns the armor of an entity (entity must be a player)."
Data["asin(n n)"] = "Returns the inverse sine of (number degrees)."
Data["asinr(n n)"] = "Returns the inverse sine (number radians)."
Data["atan(n n)"] = "Returns the inverse tangent of (number degrees)."
Data["atan(nn n)"] = "Returns the inverse tangent of (number degrees)."
Data["atanr(n n)"] = "Returns the inverse tangent (number radians)."
Data["atanr(nn n)"] = "Returns the inverse tangent (number radians)."
Data["axisTo(e:evvnnnnv)"] = "entity1:axisTo(entity2, local pos1, local pos2, force limit, torque limit, friction, nocollide, local direction)"

// B
Data["ballsocketTo(e:evnnn)"] = "entity1:ballsocketTo(entity2, local pos, force limit, torque limit, nocollide)"
Data["bearing(e:v n)"] = "Returns the bearing between entity and target vector."
Data["bearing(p:v n)"] = ""
Data["bearing(vav n)"] = "Return the bearing between a vector facing an angle and a target vector."
Data["blue(c: n)"] = "Returns the blue value of a color."
Data["boxCenter(e: v)"] = "Returns the center position of an entity's bounding box."
Data["boxMax(e: v)"] = "Returns the highest corner of an entity's bounding box."
Data["boxMin(e: v)"] = "Returns the lowest corner of an entity's bounding box."
Data["boxSize(e: v)"] = "Returns the size of an entity's bounding box."
Data["buffer( xbf)"] = ""

// C
Data["canSpawn( b)"] = ""
Data["cbrt(n n)"] = "Returns the cube root of (number)."
Data["ceil(n n)"] = "Rounds (number) up to nearest integer."
Data["ceil(nn n)"] = "Rounds (number 1) up to (number 2)'s decimal precision."
Data["ceil(v v)"] = "Rounds the components of (vector XYZ) up to nearest integer."
Data["ceil(vn v)"] = "Rounds the components of (vector XYZ) up to (number)'s decimal precision."
Data["clamp(aaa a)"] = "Clamps (angle value) between (angle min) and (angle max)."
Data["clamp(nnn n)"] = "Clamps (number value) between (number min) and (number max)."
Data["clamp(vvv v)"] = "Clamps (vector value) between (vector  min) and (vector  max)."
Data["clamp(xv2xv2xv2 xv2)"] = ""
Data["class(e: s)"] = "Returns the class of an entity."
Data["clearFilter(xtr)"] = ""
Data["color(nnn c)"] = "Creates a color RGB."
Data["color(nnnn c)"] = "Creates a color RGBA."
Data["conj(q q)"] = ""
Data["copy(t: t)"] = "Copies a table to a new table."
Data["cos(n n)"] = "Returns the cosine of (number degrees)."
Data["cosh(n n)"] = "Returns the hyperbolic cosine of (number degrees)."
Data["coshr(n n)"] = "Returns the hyperbolic cosine of (number radians)."
Data["cosr(n n)"] = "Returns the cosine of (number radians)."
Data["cot(n n)"] = "Returns the cotangent of (number degrees)."
Data["coth(n n)"] = "Returns the hyperbolic cotangent of (number degrees)."
Data["cothr(n n)"] = "Returns the hyperbolic cotangent of (number radians)."
Data["cotr(n n)"] = "Returns the cotangent of (number radians)."
Data["count(t: n)"] = "Returns the amount of entries in a table."
Data["cross(v:v v)"] = "Return the cross product (a vector perpendicular to both vectors)."
Data["cross(xv2:v xv2)"] = "Return the cross product (a vector perpendicular to both vectors)."
Data["csc(n n)"] = "Returns the cosecant of (number degrees)."
Data["csch(n n)"] = "Returns the hyperbolic cosecant of (number degrees)."
Data["cschr(n n)"] = "Returns the hyperbolic cosecant of (number radians)."
Data["cscr(n n)"] = "Returns the cosecant of (number radians)."
Data["curTime( n)"] = "Returns the time since server start in seconds."

// D
Data["distance(v:v n)"] = "Return the distance between two vectors."
Data["distance(xv2:v n)"] = "Return the distance between two vectors."
Data["distance2(v:v n)"] = "Returns the squared distance between two vectors."
Data["dot(v:v n)"] = "Returns the dot product (the sum of the product of the corresponding vector components)."
Data["dot(xv2:v n)"] = "Returns the dot product (the sum of the product of the corresponding vector components)."
Data["driver(e: e)"] = "Returns the driver of an entity (must be a vehicle)."
Data["duration(xsd: n)"] = "Returns the duration of a sound."
Data["duration(xsd:n)"] = "Sets the duration of a sound."

// E
Data["egp3DTracker(xwl:nv)"] = "Creates a 3D tracker object. Arguments are: World position."
Data["egpAlign(xwl:nn)"] = "Change the horizontal alignment. Works on: text and text layout. Number can be 0, 1 or 2."
Data["egpAlign(xwl:nnn)"] = "Change the horizontal and vertical alignment. Works on: text and text layout. Numbers can be 0, 1 or 2."
Data["egpAlpha(xwl:n n)"] = "Returns the alpha of the given EGP object."
Data["egpAlpha(xwl:nn)"] = "Sets the alpha of the given EGP object."
Data["egpAngle(xwl:n n)"] = "Returns the angle of the given EGP object."
Data["egpAngle(xwl:nn)"] = "Sets the angle of the given EGP object."
Data["egpAngle(xwl:nxv2xv2n)"] = "Rotates the given EGP object around the first vec2 with the second vec2 as offset at angle N."
Data["egpBox(xwl:nxv2xv2)"] = "Creates a box object. Arguments are: Index, Position, Size."
Data["egpBoxOutline(xwl:nxv2xv2)"] = "Creates an outlined box object. Arguments are: Index, Position, Size."
Data["egpCanSendUmsg( b)"] = "Returns true if an EGP usermessage can be sent."
Data["egpCircle(xwl:nxv2xv2)"] = "Creates a circle object. Arguments are: Index, Position, Size."
Data["egpCircleOutline(xwl:nxv2xv2)"] = "Creates an outlined circle object. Arguments are: Index, Position, Size."
Data["egpClear(xwl:)"] = "Resets the EGP."
Data["egpColor(xwl:n c)"] = "Returns the color of the given EGP object."
Data["egpColor(xwl:nc)"] = "Sets the color of the given EGP object."
Data["egpCopy(xwl:nn)"] = "Clones the second object to the first object (will create a new object if it does not exist)."
Data["egpCursor(xwl:e xv2)"] = "Returns the on-screen aim position of the player."
Data["egpDrawTopLeft(xwl:b)"] = "If true, EGP objects will draw from the top left corner to the bottom right corner of the screen."
Data["egpFidelity(xwl:n n)"] = "Returns the fidelity (number of vertices) of the given egp object."
Data["egpFidelity(xwl:nn)"] = "Sets the fidelity (number of vertices) of the given egp object."
Data["egpFont(xwl:ns)"] = "Change the font. Works on: text and text layout."
Data["egpFont(xwl:nsn)"] = "Change the font and size. Works on: text and text layout."
Data["egpHasObject(xwl:n b)"] = "Returns true if the given EGP object is valid."
Data["egpLine(xwl:nxv2xv2)"] = "Creates a line object. Arguments are: Index, Position 1, Position 2"
Data["egpLoadFrame(xwl:s)"] = "Loads the frame with the name S."
Data["egpMaterial(xwl:n s)"] = "Returns the material of the given EGP object."
Data["egpMaterial(xwl:ns)"] = "Sets the material of the given EGP object."
Data["egpMaterialFromScreen(xwl:ne)"] = "Set the material of the given EGP object to the material from another RenderTarget screen."
Data["egpMaxObjects( n)"] = "Returns the maximum amount of EGP objects allowed by the server."
Data["egpMaxUmsgPerSecond( n)"] = "Returns the maximum amount EGP user messages allowed by the server."
Data["egpNumObjects(xwl: n)"] = "Returns the amount of objects the EGP contains."
Data["egpOrder(xwl:n n)"] = "Returns the order the given EGP object is rendered. "
Data["egpOrder(xwl:nn)"] = "Set the order the given EGP object is rendered."
Data["egpParent(xwl:n n)"] = "Returns the parent object of the given EGP object."
Data["egpParent(xwl:ne)"] = "Parents a 3D tracker object to an entity (will not work for other objects)."
Data["egpParent(xwl:nn)"] = "Parents the given EGP object to another object."
Data["egpParentToCursor(xwl:n)"] = "Parents the given EGP object to an EGP cursor."
Data["egpPos(xwl:n xv2)"] = "Returns the position of the given EGP object."
Data["egpPos(xwl:nv)"] = "Sets the position of a 3D tracker object (will not work for other objects)."
Data["egpPos(xwl:nxv2)"] = "Sets the position of the given EGP object."
Data["egpRadius(xwl:n n)"] = "Returns the corner radius of rounded boxes. Works on: rounded box and rounded box outline."
Data["egpRadius(xwl:nn)"] = "Sets the corner radius of rounded boxes. Works on: rounded box and rounded box outline."
Data["egpRemove(xwl:n)"] = "Removes the given EGP object."
Data["egpResolution(xwl:xv2xv2)"] = "Sets the scale of the screen such that the top left corner is equal to the first vector and the bottom right corner is equal to the second vector."
Data["egpRoundedBox(xwl:nxv2xv2)"] = "Creates a rounded box object. Arguments are: Index, Position, Size."
Data["egpRoundedBoxOutline(xwl:nxv2xv2)"] = "Creates an outlined rounded box object. Arguments are: Index, Position, Size."
Data["egpSaveFrame(xwl:s)"] = "Saves the current frame with the name S."
Data["egpScale(xwl:xv2xv2)"] = "Sets the scale of the screen's X axis to the first vector and Y axis to the second vector."
Data["egpScrH(e n)"] = "Returns the player's screen resolution height."
Data["egpScrSize(e xv2)"] = "Returns the player's screen resolution."
Data["egpScrW(e n)"] = "Returns the player's screen resolution width."
Data["egpSetText(xwl:ns)"] = "Changes the text. Works on: text and text layout."
Data["egpSize(xwl:n xv2)"] = "Returns the size. Works on: Any object with width and height size (ie box, circle, text layout, etc)."
Data["egpSize(xwl:nn)"] = "Change the size. Works on: Any object with width and height size (ie does not work on text, poly, triangle, etc. Note: does work on line)."
Data["egpSize(xwl:nxv2)"] = "Change the position. Works on: Any object with x and y position (ie does not work on poly, line, triange, etc)."
Data["egpSizeNum(xwl:n n)"] = "Type-Number.png \9Returns the number size. Works on: Any object with a number size (ie text, text layout, line, wedge, etc) "
Data["egpText(xwl:nsxv2)"] = "Creates a text object. Arguments are: Text, Position."
Data["egpTextLayout(xwl:nsxv2xv2)"] = "Creates a text layout object. Arguments are: Text,Position, Size."
Data["egpTrackerParent(xwl:n e)"] = "Returns the parent entity of a 3d tracker object."
Data["egpTriangle(xwl:nxv2xv2xv2)"] = "Creates a triangle object. Arguments are: Position nr 1, Position nr 2, Position nr 3."
Data["egpTriangleOutline(xwl:nxv2xv2xv2)"] = "Creates an outlined triangle object. Arguments are: Position nr 1, Position nr 2, Position nr 3."
Data["egpUnParent(xwl:n)"] = " \9Remove the parenting of an object."
Data["egpWedge(xwl:nxv2xv2)"] = "Creates a wedge object. Arguments are: Position, Size. Wedge objects have a cake-piece-like mouth which you can change using egpSize."
Data["egpWedgeOutline(xwl:nxv2xv2)"] = "Creates an outlined wedge object. Arguments are: Position, Size. Wedge objects have a cake-piece-like mouth which you can change using egpSize."
Data["elasticTo(e:evvnnnsnb)"] = "entity1:elasticTo(entity2, local pos1, local pos2, constant, damping, rdamping, material, width, stretch only)"
Data["elevation(e:v n)"] = "Returns the elevation between entity and target vector."
Data["elevation(p:v n)"] = ""
Data["elevation(vav n)"] = "Return the elevation between a vector facing an angle and a target vector."
Data["enableClip(h:nb)"] = "Enables clip (number) on the hologram if (boolean) is true."
Data["enableGravity(e:b)"] = "Enables or disables gravity of an entity."
Data["endPos(xtr:v)"] = ""
Data["entity(n e)"] = "Returns the entity associated with (number id)."
Data["entity(xsd: s)"] = "Returns the entity a sound is attached to."
Data["entity(xtr: e)"] = ""
Data["entity(xwl: e)"] = ""
Data["exists(t:e b)"] = "Returns true if (entity) exists in the table."
Data["exists(t:n b)"] = "Returns true if (number) exists in the table."
Data["exists(t:s b)"] = "Returns true if (string) exists in the table."
Data["exp(n n)"] = "Returns the constant e (2.71828) to the power of (number)."
Data["exp(q q)"] = ""
Data["explode(s:s t)"] = "Explodes a string into a table, each entry separated by (string)."
Data["explodePattern(s:s t)"] = ""
Data["eye(e: v)"] = "Returns the direction entity's eyes are facing (entity must be a player)."
Data["eyeAngles(e: a)"] = "Returns the angles of an entity's eyes (entity must be a player)."
Data["eyeTrace(e: xtr)"] = "Returns a trace table using the entity's eye direction (entity must be a player)."

// F
Data["fade(xsd:n)"] = "Fades out the sound, (number) is the duration of fade."
Data["fade(xsd:nn)"] = "Fades out the sound after (number 1) seconds, (number 2) is the duration of fade."
Data["filter(xtr:e)"] = ""
Data["find(s:s n)"] = "Returns the location of first instance of (string) in a string."
Data["find(s:sn n)"] = "Returns he location of first instance of (string) in a string, starting at location (number)."
Data["findByClass(s t)"] = "Find entities with class type (string) and returns them in a table."
Data["findByModel(s t)"] = "Find entities with model (string) and returns them in a table."
Data["findInBox(vv t)"] = "Find entities within box (vector min, vector max) and returns them in a table."
Data["findInCone(vvna t)"] = "Find entities in cone starting from (vector pos) in direction (vector dir) with length (number len) and width (number deg) and returns them in a table.."
Data["findInSphere(vn t)"] = "Find entities within sphere at (vector pos) with radius (number radius) and returns them in a table."
Data["findPattern(s:s n)"] = "Returns the 1st occurrence of the string S using REGEX functions, returns 0 if not found."
Data["findPattern(s:sn n)"] = "Returns the 1st occurrence of the string S starting at N and going to the end of the string using REGEX functions, returns 0 if not found."
Data["floor(n n)"] = "Rounds (number) down to nearest integer."
Data["floor(v v)"] = "Rounds components of (vector XYZ) down to nearest integer."
Data["forward(a: v)"] = "Returns the forward vector of an angle."
Data["forward(e: v)"] = "Returns the forward vector of an entity."
Data["forward(p: v)"] = ""
Data["forward(q: v)"] = ""
Data["frac(n n)"] = "Returns the number to the right of the decimal (fractional component)."
Data["fraction(xtr: n)"] = ""
Data["fractionLeftSolid(xtr: n)"] = ""
Data["freeze(e:b)"] = "Freezes the entity if true."

// G
Data["gateName( s)"] = "Returns the name of the executing lemongate."
Data["gateName(s)"] = "Sets the name of the executing lemongate."
Data["getColor(e: c)"] = "Returns the color RGBA of an entity."
Data["getColor(h: c)"] = "Returns the color RGBA of hologram."
Data["getConstraints(e: t)"] = "Returns a table of an entity's constraints."
Data["getHitState(xtr: n)"] = ""
Data["getMaterial(e: s)"] = "Returns the material of an entity."
Data["getMaterial(h: s)"] = "Returns the material of a hologram."
Data["getParent(h: e)"] = "Returns the parent entity of a hologram."
Data["getParentHolo(h: h)"] = "Returns the parent hologram of a hologram."
Data["getPhysics(e: p)"] = ""
Data["getPhysicsCount(e: n)"] = ""
Data["getPhysicsIndex(e:n p)"] = ""
Data["getPlayers( t)"] = "Returns a table of every player on the server."
Data["getScale(h: v)"] = "Returns the scale of a hologram."
Data["getSkin(e: n)"] = "Returns the current skin number of an entity."
Data["getSkin(h: n)"] = "Returns the current skin number of hologram."
Data["getSkinCount(e: n)"] = "Returns the amount of skins an entity has."
Data["getSkinCount(h: n)"] = "Returns the amount of skins a hologram has."
Data["getTable(!: t)"] = "Returns information table of exception."
Data["green(c: n)"] = "Returns the green value of a color."

// H
Data["hardPerf( n)"] = "Exact amount of performance remaining this second."
Data["hasConstraints(e: n)"] = "Returns the number of constraints entity has."
Data["hasInput(xwl:s b)"] = "Returns true if the linked component has an input of the specified name."
Data["hasKinect(e: b)"] = "Returns true if player (E) has a kinect."
Data["hasOutput(xwl:s b)"] = "Returns true if the linked component has an output of the specified name."
Data["heading(e:v a)"] = "Returns the heading between entity and target vector."
Data["heading(p:v a)"] = ""
Data["heading(vav a)"] = "Return the heading between a vector facing an angle and a target vector."
Data["health(e: n)"] = "Returns the current health of an entity."
Data["hit(xtr: b)"] = "Returns true if trace hit anything."
Data["hitAll(xtr:)"] = "Trace Mask: Al."
Data["hitAuxilory(xtr:b)"] = "Trace Mask: Auxiliary"
Data["hitBone(xtr: n)"] = "Returns the ENUM of bone hit by trace. See wiki for list of ENUMs."
Data["hitBox(xtr: n)"] = "Returns the ENUM of hitGroup the trace hit. Alternative to hitGroup. See wiki for list of ENUMs."
Data["hitDebris(xtr:b)"] = "Trace Mask: Debris"
Data["hitDetail(xtr:b)"] = "Trace Mask: Detail props"
Data["hitGrate(xtr:b)"] = ""
Data["hitGroup(xtr: n)"] = "Returns the ENUM of hitGroup the trace hit. Alternative to hitBox. See wiki for list of ENUMs."
Data["hitHitboxes(xtr:b)"] = ""
Data["hitLadders(xtr:b)"] = "Trace Mask: Ladders"
Data["hitMaterial(xtr: n)"] = "Returns the ENUM of material hit by trace. See wiki for list of ENUMs."
Data["hitMoveable(xtr:b)"] = ""
Data["hitNPC(xtr:b)"] = "Trace Mask: NPC"
Data["hitNPCClip(xtr:b)"] = ""
Data["hitNoDraw(xtr: b)"] = "Returns true if the trace hit a no-draw brush."
Data["hitNonWorld(xtr: b)"] = "Returns true if the trace hit a non-world surface (a prop, for example)."
Data["hitNormal(xtr: v)"] = "Returns the normal of the surface that was hit by trace."
Data["hitOpaque(xtr:b)"] = ""
Data["hitOrigin(xtr:b)"] = ""
Data["hitPlayerClip(xtr:b)"] = ""
Data["hitPortal(xtr:b)"] = ""
Data["hitPos(xtr: v)"] = "Returns the position that was hit by trace."
Data["hitSky(xtr: b)"] = "Returns true if skybox was hit by trace."
Data["hitSlime(xtr:b)"] = ""
Data["hitSolid(xtr:b)"] = ""
Data["hitTexture(xtr: s)"] = "Returns the texture of surface hit by trace."
Data["hitTranslucent(xtr:b)"] = ""
Data["hitWater(xtr:b)"] = "Trace Mask: Water"
Data["hitWindows(xtr:b)"] = ""
Data["hitWorld(xtr: b)"] = "Trace Mask: World."
Data["hologram( h)"] = "Creates a hologram."
Data["hologram(s h)"] = "Creates a hologram with (string model)."
Data["hologram(sv h)"] = "Creates a hologram with (string model) at (vector position)."
Data["holograms( t)"] = "Returns a table of all holograms owned by the executing lemongate."
Data["hsv2rgb(c: c)"] = "Converts a color from HSV to RGB space."
Data["hsv2rgb(nnn c)"] = "Converts a color from HSV to RGB space."
Data["httpPostRequest(stff)"] = "Makes a HTTP POST request to S with POST parameters T and calls F1 with Body[String] on success and F2 with no parameters on failure."
Data["httpRequest(sff)"] = "Makes a HTTP GET request to S and calls F1 with Body[String] on success and F2 with no parameters on failure."

// I
Data["include(s)"] = "includes a file with in scope."
Data["include(sb)"] = "includes a file with new scope if boolean is true."
Data["i(q: n)"] = ""
Data["ignoreNoDraw(xtr:b)"] = "Trace Mask: No-Draw textures"
Data["inNoclip(e: b)"] = "Returns true if the entity is no-clipped."
Data["index(s:n s)"] = "Returns the Nth character of a string as a string."
Data["inertia(e: v)"] = "Returns the inertia of an entity as a vector."
Data["inertia(p: v)"] = ""
Data["inertiaA(e: a)"] = "Returns the inertia of an entity as an angle."
Data["inputType(xwl:s s)"] = "Returns the wiretype of an input on the linked component."
Data["inrange(aaa b)"] = "Returns true if (angle value) is between (angle min) and (angle max)."
Data["inrange(nnn n)"] = "Returns true if (number value) is between (number min) and (number max)."
Data["inrange(vvv b)"] = "Returns true if (vector value) is between (vector min) and (vector max)."
Data["inrange(xv2xv2xv2 b)"] = ""
Data["insert(t:!)"] = "Inserts (exception) to the bottom of a table."
Data["insert(t:?)"] = "Inserts (variant) to the bottom of a table."
Data["insert(t:a)"] = "Inserts (angle) to the bottom of a table."
Data["insert(t:b)"] = "Inserts (boolean) to the bottom of a table."
Data["insert(t:c)"] = "Inserts (color) to the bottom of a table."
Data["insert(t:e)"] = "Inserts (entity) to the bottom of a table."
Data["insert(t:f)"] = "Inserts (function) to the bottom of a table."
Data["insert(t:h)"] = "Inserts (hologram) to the bottom of a table."
Data["insert(t:n!)"] = "Inserts (exception) to entry (number) of a table."
Data["insert(t:n)"] = "Inserts (hologram) to the bottom of a table."
Data["insert(t:n?)"] = "Inserts (variant) to entry (number) of a table."
Data["insert(t:na)"] = "Inserts (angle) to entry (number) of a table."
Data["insert(t:nb)"] = "Inserts (boolean to entry (number) of a table."
Data["insert(t:nc)"] = "Inserts (color) to entry (number) of a table."
Data["insert(t:ne)"] = "Inserts (entity) to entry (number) of a table."
Data["insert(t:nf)"] = "Inserts (function) to entry (number) of a table."
Data["insert(t:nh)"] = "Inserts (hologram) to entry (number) of a table."
Data["insert(t:nn)"] = "Inserts (number value) to entry (number) of a table."
Data["insert(t:np)"] = "Inserts (buffer) to entry (number) of a table."
Data["insert(t:nq)"] = ""
Data["insert(t:ns)"] = "Inserts (string) to entry (number) of a table."
Data["insert(t:nt)"] = "Inserts (table) to entry (number) of a table."
Data["insert(t:nv)"] = "Inserts (vector) to entry (number) of a table."
Data["insert(t:nxbf)"] = ""
Data["insert(t:nxsd)"] = "Inserts (sound) to entry (number) of a table."
Data["insert(t:nxtr)"] = "Inserts (trace) to entry (number) of a table."
Data["insert(t:nxv2)"] = "Inserts (vector2) to entry (number) of a table."
Data["insert(t:nxwl)"] = "Inserts (wirelink) to entry (number) of a table."
Data["insert(t:p)"] = "Inserts (buffer) to the bottom of a table."
Data["insert(t:q)"] = ""
Data["insert(t:s)"] = "Inserts (string) to the bottom of a table."
Data["insert(t:t)"] = "Inserts (table) to the bottom of a table."
Data["insert(t:v)"] = "Inserts (vector) to the bottom of a table."
Data["insert(t:xbf)"] = ""
Data["insert(t:xsd)"] = "Inserts (sound) to the bottom of a table."
Data["insert(t:xtr)"] = "Inserts (trace) to the bottom of a table."
Data["insert(t:xv2)"] = "Inserts (vector2) to the bottom of a table."
Data["insert(t:xwl)"] = "Inserts (wirelink to the bottom of a table."
Data["int(n n)"] = "Returns the number to the left of the decimal (integer component)."
Data["inv(q q)"] = ""
Data["isAdmin(e: b)"] = "Returns true if the entity is an admin (entity must be a player)."
Data["isConstrained(e: b)"] = "Returns true if entity has any constraints."
Data["isFrozen(e: b)"] = "Returns true if entity is frozen."
Data["isFrozen(p: b)"] = ""
Data["isHiSpeed(xwl: b)"] = "Returns true if the wirelinked object supports the HiSpeed interface. See wiremod wiki for more information."
Data["isHologram(e: b)"] = "Returns true if entity is a hologram."
Data["isNPC(e: b)"] = "Returns true if entity is an NPC."
Data["isOnFire(e: b)"] = "Returns true if entity is on fire."
Data["isOnGround(e: b)"] = "Returns true if entity is on the ground (entity must be a player)."
Data["isPlayer(e: b)"] = "Returns true if entity is a player."
Data["isPlayerHolding(e: b)"] = "Returns true if entity is being held by a player."
Data["isPlaying(xsd: b)"] = "Returns true if the sound is currently playing."
Data["isSuperAdmin(e: b)"] = "Returns true if entity is a super admin (entity must be a player)."
Data["isUnderWater(e: b)"] = "Returns true if entity is under water."
Data["isValid(e: b)"] = "Returns true if entity is a valid entity."
Data["isVehicle(e: b)"] = "Returns true if entity is a vehicle."
Data["isWeapon(e: b)"] = "Returns true if entity is a weapon."
Data["isWeldedTo(e: e)"] = "Returns the entity (entity) is welded to."
Data["isWorld(e: b)"] = "Returns true if entity is the world."

// J
Data["j(q: n)"] = ""

// K
Data["k(q: n)"] = ""
Data["kinectActive(e: b)"] = "Returns true if player's (E) kinect is active."
Data["kinectHead(e: v)"] = "Gets a position from the players motion sensor."
Data["kinectHip(e: v)"] = "Gets a position from the players motion sensor."
Data["kinectLeftAnkle(e: v)"] = "Gets a position from the players motion sensor."
Data["kinectLeftElbow(e: v)"] = "Gets a position from the players motion sensor."
Data["kinectLeftFoot(e: v)"] = "Gets a position from the players motion sensor."
Data["kinectLeftHand(e: v)"] = "Gets a position from the players motion sensor."
Data["kinectLeftHip(e: v)"] = "Gets a position from the players motion sensor."
Data["kinectLeftKnee(e: v)"] = "Gets a position from the players motion sensor."
Data["kinectLeftShoulder(e: v)"] = "Gets a position from the players motion sensor."
Data["kinectLeftWrist(e: v)"] = "Gets a position from the players motion sensor."
Data["kinectRightAnkle(e: v)"] = "Gets a position from the players motion sensor."
Data["kinectRightElbow(e: v)"] = "Gets a position from the players motion sensor."
Data["kinectRightFoot(e: v)"] = "Gets a position from the players motion sensor."
Data["kinectRightHand(e: v)"] = "Gets a position from the players motion sensor."
Data["kinectRightHip(e: v)"] = "Gets a position from the players motion sensor."
Data["kinectRightKnee(e: v)"] = "Gets a position from the players motion sensor."
Data["kinectRightShoulder(e: v)"] = "Gets a position from the players motion sensor."
Data["kinectRightWrist(e: v)"] = "Gets a position from the players motion sensor."
Data["kinectShoulder(e: v)"] = "Gets a position from the players motion sensor."
Data["kinectSpine(e: v)"] = "Gets a position from the players motion sensor."

// L
Data["left(s:n s)"] = "Returns the next N characters starting with the leftmost character."
Data["leftClick(e: b)"] = "Returns true if entity clicked the left mouse button (entity must be a player)."
Data["length(s: n)"] = "Returns the length of a string"
Data["length(v: n)"] = "Returns the length of a vector."
Data["length(xv2: n)"] = "Returns the length of a vector."
Data["length2(v: n)"] = "Returns the squared length of a vector."
Data["level(xsd: n)"] = "Returns the level of a sound in decibels."
Data["level(xsd:n)"] = "Sets the level of a sound in decibels."
Data["ln(n n)"] = "Returns the logarithm of (number) to base e."
Data["log(nn n)"] = "Returns the logarithm of (number1 value) to (number2 base)."
Data["log(q q)"] = ""
Data["log10(n n)"] = "Returns the logarithm of (number) to base 10."
Data["log2(n n)"] = "Returns the logarithm of (number) to base 2."
Data["lower(s: s)"] = "Returns a lower-cased (string)."

// M
Data["map( s)"] = "Returns the name of the map."
Data["mass(e: n)"] = "Returns the mass of an entity."
Data["mass(p: n)"] = ""
Data["massCenter(e: v)"] = "Returns the mass center of an entity as a local vector."
Data["massCenter(p: v)"] = ""
Data["massCenterL(p: v)"] = ""
Data["massCenterWorld(e: v)"] = "Returns the mass center of an entity as a world vector."
Data["matchFirst(s:s s)"] = "Returns a string match to (string) starting at the leftmost character."
Data["matchFirst(s:sn s)"] = "Returns a string match to (string) starting at the leftmost character starting at location (number)."
Data["matchPattern(s:s t)"] = "Matches a string and returns a table of the sub-captures."
Data["matchPattern(s:sn t)"] = "Matches a string and returns a table of the sub-captures starting at (number)."
Data["max(nn n)"] = "Returns the number with the highest value."
Data["max(nnn n)"] = "Returns the number with the highest value."
Data["max(nnnn n)"] = "Returns the number with the highest value."
Data["max(nnnnn n)"] = "Returns the number with the highest value."
Data["maxHologramClips( n)"] = "Returns the maximum hologram clips per hologram allowed by the server."
Data["maxHolograms( n)"] = "Returns the maximum number of holograms per player allowed by the server."
Data["maxPerf( n)"] = "Maximum performance points the gate can use per second."
Data["message(!: s)"] = "Returns the current exceptions message."
Data["min(nn n)"] = "Returns the number with the lowest value."
Data["min(nnn n)"] = "Returns the number with the lowest value."
Data["min(nnnn n)"] = "Returns number with the lowest value."
Data["min(nnnnn n)"] = "Returns the number with the lowest value."
Data["mix(aan a)"] = "Returns a linear interpolation between two angles."
Data["mix(nnn n)"] = "Returns a linear interpolation between two numbers."
Data["mix(vvn v)"] = "Returns a linear interpolation between two vectors."
Data["mix(xv2xv2n xv2)"] = "Returns a linear interpolation between two vectors."
Data["model(e: s)"] = "Returns the model path of an entity."

// N
Data["name(e: s)"] = "Returns the name of an entity."
Data["noCollideAll(e:b)"] = "Disables all collisions for an entity."
Data["noCollideTo(e:e)"] = "NoCollides (entity 1) to (entity 2)."
Data["noSpawnEffect(b)"] = ""
Data["normal(xtr: v)"] = "Returns a normalized vector representing the direction of the trace from start to finish."
Data["normalized(v: v)"] = "Returns a normalized vector."
Data["normalized(xv2: xv2)"] = "Returns a normalized vector."

// O
Data["outputType(xwl:s s)"] = "Returns the wiretype of an output on the linked component."
Data["owner( e)"] = "Returns the owner of the executing lemongate."
Data["owner(e: b)"] = "Returns the owner of an entity."

// P
Data["p(a: n)"] = "Returns the pitch component of an angle."
Data["parent(e:e)"] = "Sets the parent of an entity."
Data["parent(h:e)"] = "Sets the parent of a hologram."
Data["passenger(e: e)"] = "Returns the passenger of an entity (entity must be a vehicle)."
Data["path(xsd: s)"] = "Returns the path of a sound."
Data["perf( n)"] = "Current used performance points this second."
Data["pi( n)"] = "Returns pi (approximately 3.1415926535898)."
Data["ping(e: n)"] = "Returns the ping of an entity (entity must be a player)."
Data["pitch(xsd: n)"] = "Returns the pitch of a sound."
Data["pitch(xsd:n)"] = "Sets the pitch of a sound."
Data["play(xsd:)"] = "Starts playing  a sound."
Data["play(xsd:n)"] = "Starts playing a sound, for (number) duration."
Data["pos(e: v)"] = "Returns the global position of an entity."
Data["pos(p: v)"] = ""
Data["propcore( t)"] = ""
Data["pushClip(h:nvv)"] = "Clip a hologram, (number clip index) at (vector position) across (vector axis)."

// Q
Data["qMod(q q)"] = ""
Data["qRotation(v q)"] = ""
Data["qRotation(vn q)"] = ""
Data["qi( q)"] = ""
Data["qi(n q)"] = ""
Data["qj( q)"] = ""
Data["qj(n q)"] = ""
Data["qk( q)"] = ""
Data["qk(n q)"] = ""
Data["quat( q)"] = ""
Data["quat(a q)"] = ""
Data["quat(e q)"] = ""
Data["quat(n q)"] = ""
Data["quat(nnnn q)"] = ""
Data["quat(v q)"] = ""
Data["quat(vv q)"] = ""

// R
Data["r(a: n)"] = "Returns the roll component of an angle."
Data["radius(e: n)"] = "Returns the radius of an entity."
Data["random( n)"] = "Returns a random floating point number between 0 and 1."
Data["random(n n)"] = "Returns a random floating point number between 0 and (number max)."
Data["random(nn n)"] = "Returns a random floating-point number between the specified interval."
Data["readAngle(xbf: a)"] = ""
Data["readArray(xwl:nn t)"] = ""
Data["readCell(xwl:n n)"] = "Reads from high speed memory on the linked component."
Data["readEntity(xbf: e)"] = ""
Data["readNumber(xbf: n)"] = ""
Data["readPos(xbf n)"] = ""
Data["readString(xbf: s)"] = ""
Data["readVector(xbf: v)"] = ""
Data["real(q: n)"] = ""
Data["red(c: n)"] = "Returns the red value of a color."
Data["remove(e:)"] = "Removes the entity."
Data["remove(h:)"] = "Removes the hologram."
Data["remove(t:e)"] = "Removes entry <entity> from table."
Data["remove(t:n)"] = "Removes entry <number> from table."
Data["remove(t:s)"] = "Remove entry <string> from table."
Data["removeAllConstraints(e:)"] = "Removes all constraints from an entity."
Data["removeClip(h:n)"] = "Remove a clip from a hologram."
Data["removeConstraint(e:s)"] = "Removes all constraints of type (string) from an entity."
Data["repeat(s:n s)"] = "Returns a string of (string) repeated (number) times."
Data["replace(s:ss n)"] = "Replace every instance of (string1 find) with (string2 replace)."
Data["replacePattern(s:ss s)"] = "Finds and replaces every occurrence of the first argument using REGEX with the second argument."
Data["restart(xsd:)"] = "Stops and then starts a sound."
Data["rgb2hsv(c: c)"] = "Converts a color from RGB to HSV space."
Data["rgb2hsv(nnn c)"] = "Converts a color from RGB to HSV space."
Data["right(a: v)"] = "Returns the right vector of an angle."
Data["right(e: v)"] = "Returns the right vector of an entity."
Data["right(p: v)"] = ""
Data["right(q: v)"] = ""
Data["right(s:n s)"] = "Returns (number) amount of characters starting with the rightmost character."
Data["rightClick(e: b)"] = "Returns true if entity clicked the right mouse button (entity must be a player)."
Data["root(nn n)"] = "Returns the root of (number base) and (number power)."
Data["ropeTo(e:evvnnnnsb)"] = "entity1:ropeTo(entity2, local pos1, local pos2, length, addlength, force limit, width, material, rigid)"
Data["rotate(v:a v)"] = "Rotate a vector by an angle)."
Data["rotationAngle(q n)"] = ""
Data["rotationAxis(q v)"] = ""
Data["rotationVector(q v)"] = ""
Data["round(n n)"] = "Round a number to the nearest integer."
Data["round(nn n)"] = "Round a number to (number)'s decimal precision."
Data["round(v v)"] = "Round vector XYZ components to nearest integer."
Data["round(vn v)"] = "Round vector XYZ components to (number)'s decimal precision."

// S
Data["scale(h:v)"] = "Scale a hologram by a ratio of 1:12 units."
Data["scaleUnits(h:v)"] = "Scale a hologram by a ratio of 1:1 units."
Data["sec(n n)"] = "Returns the secant of (number degrees)."
Data["sech(n n)"] = "Returns the hyperbolic secant of (number degrees)."
Data["sechr(n n)"] = "Returns the secant of (number radians."
Data["secr(n n)"] = "Returns the hyperbolic secant of (number radians)."
Data["self( e)"] = "Returns the entity of the executing lemongate."
Data["selfDestruct( e)"] = "Removes the executing lemongate."
Data["send(xbf:se)"] = ""
Data["setAlpha(c:n c)"] = "Sets the alpha value of a color."
Data["setAng(e:a)"] = "Sets the angle of an entity."
Data["setAng(h:a)"] = "Sets the angle of a hologram."
Data["setBlue(c:n c)"] = "Sets the blue value of a color."
Data["setBodygroup(e:nn)"] = "Sets the bodygroup of an entity (number groupID) (number subID)."
Data["setBodygroup(h:nn)"] = "Sets the bodygroup of a hologram (number groupID) (number subID)."
Data["setColor(e:c)"] = "Sets the color of an entity."
Data["setColor(h:c)"] = "Sets the color of a hologram."
Data["setGreen(c:n c)"] = "Sets the green value of a color."
Data["setHitState(xtr:n)"] = ""
Data["setMass(e:n)"] = "Sets the mass of an entity."
Data["setMass(p:n)"] = ""
Data["setMaterial(e:s)"] = "Sets the material of an entity."
Data["setMaterial(h:s)"] = "Sets the material of a hologram."
Data["setModel(h:s)"] = "Sets the model of a hologram."
Data["setNotSolid(e:b)"] = "Enables or disables collisions of an entity."
Data["setPhysProp(e:sb)"] = "Sets the physprop material and gravity toggle of an entity."
Data["setPitch(a:n a)"] = "Sets the pitch component of an angle."
Data["setPos(e:v)"] = "Sets the position of an entity."
Data["setPos(h:v)"] = "Sets the position of a hologram."
Data["setRed(c:n c)"] = "Sets the red value of a color."
Data["setRoll(a:n a)"] = "Sets the roll component of an angle."
Data["setSkin(e:n)"] = "Sets the skin of an entity."
Data["setSkin(h:n)"] = "Sets the skin of a hologram."
Data["setX(v:n v)"] = "Sets the X of a vector."
Data["setX(xv2:n xv2)"] = "Sets the X of a vector."
Data["setY(v:n v)"] = "Sets the Y of a vector."
Data["setY(xv2:n xv2)"] = "Sets the Y of a vector."
Data["setYaw(a:n a)"] = "Sets the yaw component of an angle."
Data["setZ(v:n v)"] = "Sets the Z of a vector"
Data["shading(h:b)"] = "Enables or disables shading of a hologram."
Data["shiftL(a a)"] = "Shift angle PYR components to the left."
Data["shiftL(v v)"] = "Shift vector XYZ components to the left."
Data["shiftR(a a)"] = "Shift angle PYR components to the right."
Data["shiftR(v v)"] = "Shift vector XYZ components to the right."
Data["shootPos(e: v)"] = "Returns the shoot position of an entity (entity must be a player)."
Data["sign(n n)"] = "Returns the sign of (number)."
Data["sin(n n)"] = "Returns the sine of (number degrees)."
Data["sinh(n n)"] = "Returns the hyperbolic sine of (number degrees)."
Data["sinhr(n n)"] = "Returns the hyperbolic sine of (number radians)."
Data["sinr(n n)"] = "Returns the sine of (number radians)."
Data["size(t: n)"] = "Returns the amount of entries in a table."
Data["skip(xbf:)"] = ""
Data["slerp(qqn q)"] = ""
Data["sliderTo(e:evvn)"] = "entity1:sliderTo(entity2, local pos1, local pos2, nocollide)"
Data["softPerf( n)"] = "95% of hardPerf()."
Data["sound(es xsd)"] = "Creates a sound object attached to an entity, where (string) is sound path."
Data["sound(esn xsd)"] = "Creates a sound object attached to an entity, where (string) is sound path and (number) is duration."
Data["sound(s xsd)"] = "Creates a sound object, where (string) is sound path."
Data["sound(sn xsd)"] = "Creates a sound object, where (string) is sound path and (number) is duration."
Data["sounds( t)"] = "Returns at table of all the sound objects owned the gate."
Data["spawn(s e)"] = ""
Data["spawn(sb e)"] = ""
Data["spawnedProps( t)"] = ""
Data["sqrt(n n)"] = "Returns the square root of (number)."
Data["startKinect(e:)"] = "Activates a players motion sensor."
Data["startPos(xtr:v)"] = ""
Data["startSolid(xtr: b)"] = ""
Data["steamID(e: s)"] = "Returns the steamID of an entity (entity must be a player)."
Data["stop(xsd:)"] = "Stops a sound."
Data["sub(s:n s)"] = "Returns a substring starting at location (number)"
Data["sub(s:nn s)"] = "Returns a substring starting at location (number1 start) and ending at (number2 end)."

// T
Data["tan(n n)"] = "Returns the tangent of (number degrees)."
Data["tanh(n n)"] = "Returns the hyperbolic tangent of (number degrees)."
Data["tanhr(n n)"] = "Returns the tangent of (number radians)."
Data["tanr(n n)"] = "Returns the hyperbolic tangent of (number radians)."
Data["tau( n)"] = "Returns tau (2pi or approximately 6.2831853071796)."
Data["throw(s)"] = "Throws a user exception with a message."
Data["throw(st)"] = "Throws a user exception with a message with a table."
Data["timeConnected(e: n)"] = "Returns the time (in seconds) that has passed since entity connected to the server (entity must be a player)."
Data["timerAdjust(snn)"] = "Modify an existing timer with (string name), (number time), (number repetitions)."
Data["timerCreate(snnf)"] = "Create a timer with (string name), (number time), (number repetitions), (function to execute)."
Data["timerPause(s n)"] = "Pause a timer."
Data["timerRemove(s)"] = "Remove a timer."
Data["timerStart(s n)"] = "Start a timer."
Data["timerStatus(s n)"] = ""
Data["timerStop(s n)"] = "Stop a timer."
Data["timerUnpause(s n)"] = "Unpause a timer."
Data["toAngle(q: a)"] = ""
Data["toAngle(v: a)"] = "Convert a vector to an angle."
Data["toAngle(v:v a)"] = ""
Data["toByte(s n)"] = "Returns the ascii code of first character in a string."
Data["toChar(n s)"] = "Returns a one-character string from its ASCII code, where 32 = argument 1 = 255. An empty string is returned for numbers outside that range."
Data["toDeg(n n)"] = "Converts (number radians) to degrees."
Data["toLocal(e:a a)"] = "Converts an angle to a local angle."
Data["toLocal(e:v v)"] = "Converts a vector to a local vector."
Data["toLocal(p:v v)"] = ""
Data["toLocalAng(vava a)"] = ""
Data["toLocalAxis(e:v v)"] = ""
Data["toLocalPos(vava v)"] = ""
Data["toRad(n n)"] = "Converts (number degrees) to radians."
Data["toString(c: s)"] = "Converts a color to a string."
Data["toWorld(e:a a)"] = "Converts an angle to a world angle."
Data["toWorld(e:v v)"] = "Converts a vector to a world vector."
Data["toWorld(p:v v)"] = ""
Data["toWorldAng(vava a)"] = ""
Data["toWorldAxis(e:v v)"] = ""
Data["toWorldPos(vava v)"] = ""
Data["tostring(? s)"] = "Converts a variant to a string."
Data["trace( xtr)"] = "Creates a trace."
Data["trace(!: t)"] = "Returns a table of traces on the stack."
Data["trace(!:n t)"] = "Returns a trace at stack position N"
Data["trace(vv xtr)"] = "Creates a trace from (vector start) to (vector finish)."
Data["trace(vvn xtr)"] = "Creates a trace from (vector start) facing (vector direction) with (number length)."
Data["trim(s: s)"] = "Remove spaces from the beginning and end of a string."
Data["trim(s:s s)"] = ""
Data["trimLeft(s:s s)"] = ""
Data["trimRight(s:s s)"] = ""
Data["type(! s)"] = "A usless function that ways returns \"exception\""
Data["type(!: s)"] = "Returns the true type of an Exception"
Data["type(? s)"] = "A usless function that ways returns \"variant\""
Data["type(a s)"] = "A usless function that ways returns \"angle\""
Data["type(b s)"] = "A usless function that ways returns \"boolean\""
Data["type(c s)"] = "A usless function that ways returns \"color\""
Data["type(e s)"] = "A usless function that ways returns \"entity\""
Data["type(f s)"] = "A usless function that ways returns \"function\""
Data["type(h s)"] = "A usless function that ways returns \"hologram\""
Data["type(n s)"] = "A usless function that ways returns \"number\""
Data["type(p s)"] = "A usless function that ways returns \"buffer\""
Data["type(q s)"] = ""
Data["type(s s)"] = "A usless function that ways returns \"string\""
Data["type(t s)"] = "A usless function that ways returns \"table\""
Data["type(t:e s)"] = ""
Data["type(t:n s)"] = ""
Data["type(t:s s)"] = ""
Data["type(v s)"] = "A usless function that ways returns \"vector\""
Data["type(xbf s)"] = ""
Data["type(xbf: s)"] = ""
Data["type(xbf:n s)"] = ""
Data["type(xsd s)"] = "A usless function that ways returns \"sound\""
Data["type(xtr s)"] = "A usless function that ways returns \"trace\""
Data["type(xv2 s)"] = "A usless function that ways returns \"vector2\""
Data["type(xwl s)"] = "A usless function that ways returns \"wirelink\""

// U
Data["up(a: v)"] = "Returns the up vector of an angle."
Data["up(e: v)"] = "Returns the up vector of an entity."
Data["up(p: v)"] = ""
Data["up(q: v)"] = ""
Data["update(xtr:)"] = ""
Data["upper(s: s)"] = "Returns an uppercased string."
Data["useLineOfSight(xtr:b)"] = ""

// V
Data["vec(nnn v)"] = "Creates a 3 dimentional vector."
Data["vec(q v)"] = ""
Data["vec2(nn xv2)"] = "Creates a 2 dimentional vector."
Data["vehicle(e: e)"] = "Returns the vehicle entity is riding in (entity must be a player)."
Data["vel(e: v)"] = "Returns the velocity of an entity."
Data["vel(p: v)"] = ""
Data["velL(e: v)"] = "Returns the local velocity of an entity."
Data["visible(h:b)"] = "Enables or disables visibility of a hologram."
Data["voidEntity( e)"] = "Returns a null entity."
Data["volume(xsd: n)"] = "Returns the volume of a sound."
Data["volume(xsd:n)"] = "Sets the volume of a sound."

// W
Data["weldTo(e:enn)"] = "entity1:weldTo(entity2, force limit, nocollide)"
Data["writeAngle(xbf:a)"] = ""
Data["writeCell(xwl:nn b)"] = "Writes to high speed memory on the linked component."
Data["writeEntity(xbf:e)"] = ""
Data["writeNumber(xbf:n)"] = ""
Data["writePos(xbf n)"] = ""
Data["writeString(xbf:s)"] = ""
Data["writeString(xwl:snn)"] = "A helper function for using the Wired Console Screen. (Text, X, Y)."
Data["writeString(xwl:snnc)"] = "A helper function for using the Wired Console Screen. (Text, X, Y, Text Col) "
Data["writeString(xwl:snncc)"] = "A helper function for using the Wired Console Screen. (Text, X, Y, Text Col, BG Color) "
Data["writeString(xwl:snnccb)"] = "A helper function for using the Wired Console Screen. (Text, X, Y, Text Col, BG Color, Flash) "
Data["writeString(xwl:snncn)"] = ""
Data["writeString(xwl:snncnb)"] = ""
Data["writeString(xwl:snnn)"] = ""
Data["writeString(xwl:snnnc)"] = ""
Data["writeString(xwl:snnncb)"] = ""
Data["writeString(xwl:snnnn)"] = ""
Data["writeString(xwl:snnnnb)"] = ""
Data["writeVector(xbf:v)"] = ""

// X
Data["x(v: n)"] = "Returns the X component of a vector."
Data["x(xv2: n)"] = "Returns the X component of a vector."

// Y
Data["y(a: n)"] = "Returns the yaw component of an angle."
Data["y(v: n)"] = "Returns the Y component of a vector."
Data["y(xv2: n)"] = "Returns the Y component of a vector."

// Z
Data["z(v: n)"] = "Returns the Z component of a vector."