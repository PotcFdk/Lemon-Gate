Expresson Advanced Documentation:
	
	Info:
		
		Expresson Adanced (E-A) is a scripting languge written by
		Rusketh (Christopher Goluch) and Oska49 and other contributers.
		The project was started in July 2012 on the back of the teams previous uncompleted Expresson 3.
		E-A is commonly refered to as Lemon or LemonGate, the codename past over from the Expression 3 project.

	Variables:
		
		In E-A all variables must begin with an upper cased letter.
		E-A is a type strict variable language so types must be specified on decleration.
		
		Example: number Var = 5
		
		E-A supports both local and global variables. All variables in E-A are global by default unless declared as local.
		
		Example: local number Var = 5
		
		As well as local Variables E-A supports dynamic creation of i/o Variables and persistant Variables.
		These Variables can only be declared in the root of your code and are always global Variables.
		
		Examples:
			
			input  number Var
			output number Var = 6
			perist number Var = 6
		
		Notice how the input Variable is not assigned using the 'assigment operator (=)' this is because input variables are unassignable.
		
		All global and local variabels are cleared at the start of every execution.
		If you need to retain data between executions you need to use a persistant variable.
		
	
		E-A also offers the ability to declare and assign multiple variabels of the same type on one line with out using a sequence seperator.
		
		Example: number VarA, Var2, Var3 = 1, 2, 3
		
		These variables will be assigned in sequence so the following is possible
		
		Example: number VarA, VarB, VarC = 1, VarA * 2, VarA + VarB
	
	
	Proposed Features:
		
		The following features are currently not avalible in E-A.
		These features are planned to be supported before E-A enters public beta testing.
		The documentation provided is likly to change as at time of writing these features are only proposed.
			
		First Class Functions:
			
			First class functions will be implemented as Fvars (Function Variables).
			Fvars must begin with lower cased letters and can be global or local, global Fvars will always be treated as persistant.
			
			The following example shows the creation of a local Fvar.
			
			Example:
				
				
				local function fvar() {
					//Do something here?
				}
			
			
			Fvars also support peramaters, these are type strict and missmatches at runtime will result in script errors.
			Peramaters will become local variables for use in the function.
			The following example shows a global Fvar with 3 differnt peramters.
			
			Example:
			
				function favr(PeramA, PeramB:num, PeramC:string) {
					//Do something
				}
			
			Notice: VarA does not have a type and will be assigned as a number by default.
			
			
			Fvars can support return values witch need to be defeined when declaring an Fvar, as with peramaters missmatches will result in script errors.
			
			
			Example:
				
				function string fvar(Peram:string) {
					return Peram
				}
			
			E-A also supports Fvars to be directly created in an array or table, the syntax will probably change during development.

			Example:
				
				function number Array[1](Peram) {
					return Peram + 1
				}

			It is also possible to move Fvars around, as well as to and from arrays/tables.
			
			Example:
				
				local fvarA = Array[1, function]

				fvarB = fvarA

				Array[1, function] = fvarB
			

		Obserable Variables:
			
			Obserable Variables are also known as OVars.
			Unlike variabels Ovars will be assigned formulas and variables instead of values.
			
			Example:
				
				number VarA, VarB = 1, 3
				
				number $Ovar = VarA * VarB
			
			In the above example when Variables 'VarA and VarC' change so will the value of Ovar.
			
			Example:
				
				print( Ovar ) // Prints 3
				
				VarA = 2
				
				print( Ovar ) // Prints 6
			
			Any functions / methods used in Ovars will not be recalled, so variabels used as function peramaters will not be observed.
			

			Example:
				
				number VarA, VarB = 1, 2

				number $Ovar = min(VarA, VarB)	* VarA
			
			In the above example 'Ovar' will always be '1 * VarA'.
		
		
		
		
		
